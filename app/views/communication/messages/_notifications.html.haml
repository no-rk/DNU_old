- unless notifications.blank?
  %table.table.table-hover
    %thead
      %tr
        %td= I18n.t("notification.from"   , :scope => "communication").html_safe
        %td= I18n.t("notification.subject", :scope => "communication").html_safe
        %td= I18n.t("notification.body"   , :scope => "communication").html_safe
        %td= I18n.t("notification.to"     , :scope => "communication").html_safe
        %td= I18n.t("notification.time"   , :scope => "communication").html_safe
    %tbody
      - notifications.each do |notification|
        - sender = notification.notified_object
        - sender_id = notification.notified_object.id
        - if current_user.id==sender_id
          %tr
            %td ENo.#{sender_id} #{nickname_by_id(sender_id)}
            %td!= DNU::Text.new.string(notification.subject)
            %td!= DNU::Text.new(sender, current_user).message(notification.body)
            %td= notification.receipts.find(:all,:conditions=>["receiver_id NOT IN(?)", sender_id]).map{|r| "ENo." + r.receiver_id.to_s + (I18n.t("unread", :scope => "communication") if r.is_unread?).to_s }.compact.join(',').html_safe
            %td #{notification.updated_at}
        - else
          %tr
            %td ENo.#{sender_id} #{nickname_by_id(sender_id)}
            %td #{DNU::Text.new.string(notification.subject).html_safe} #{I18n.t("unread", :scope => "communication").html_safe if notification.receipts.find_by_receiver_id(current_user.id).is_unread?}
            %td!= DNU::Text.new(sender, current_user).message(notification.body)
            %td= notification.receipts.find(:all,:conditions=>["receiver_id NOT IN(?,?)", current_user.id, sender_id]).map{|r| "ENo." + r.receiver_id.to_s + (I18n.t("unread", :scope => "communication") if r.is_unread?).to_s }.compact.join(',').html_safe
            %td #{notification.updated_at}
  = paginate notifications if notifications.respond_to?(:current_page)
