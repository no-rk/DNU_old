parser = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "text": parse_text,
        "text_tags": parse_text_tags,
        "imag": parse_imag,
        "multicols": parse_multicols,
        "multicols_2": parse_multicols_2,
        "multicols_3": parse_multicols_3,
        "align": parse_align,
        "center": parse_center,
        "left": parse_left,
        "right": parse_right,
        "justify": parse_justify,
        "serif": parse_serif,
        "messages": parse_messages,
        "message": parse_message,
        "icon": parse_icon,
        "icon_l": parse_icon_l,
        "icon_r": parse_icon_r,
        "speaker": parse_speaker,
        "balloon": parse_balloon,
        "tags": parse_tags,
        "self": parse_self,
        "target": parse_target,
        "newline": parse_newline,
        "bold": parse_bold,
        "italic": parse_italic,
        "delete": parse_delete,
        "under": parse_under,
        "big": parse_big,
        "small": parse_small,
        "ruby": parse_ruby,
        "font_color": parse_font_color,
        "font_color1": parse_font_color1,
        "font_color2": parse_font_color2,
        "font_color3": parse_font_color3,
        "font_color4": parse_font_color4,
        "font_color5": parse_font_color5,
        "font_color6": parse_font_color6,
        "font_color7": parse_font_color7,
        "bold_tag": parse_bold_tag,
        "thin_tag": parse_thin_tag,
        "italic_tag": parse_italic_tag,
        "delete_tag": parse_delete_tag,
        "under_tag": parse_under_tag,
        "small_tag": parse_small_tag,
        "middle_tag": parse_middle_tag,
        "big_tag": parse_big_tag,
        "font_color_tag": parse_font_color_tag,
        "font_color0_tag": parse_font_color0_tag,
        "font_color1_tag": parse_font_color1_tag,
        "font_color2_tag": parse_font_color2_tag,
        "font_color3_tag": parse_font_color3_tag,
        "font_color4_tag": parse_font_color4_tag,
        "font_color5_tag": parse_font_color5_tag,
        "font_color6_tag": parse_font_color6_tag,
        "font_color7_tag": parse_font_color7_tag,
        "normal_tag": parse_normal_tag,
        "num": parse_num,
        "bra": parse_bra,
        "ket": parse_ket,
        "n1_9": parse_n1_9,
        "n0_9": parse_n0_9,
        "multi": parse_multi,
        "l": parse_l,
        "r": parse_r,
        "c": parse_c,
        "j": parse_j,
        "b": parse_b,
        "t": parse_t,
        "i": parse_i,
        "d": parse_d,
        "u": parse_u,
        "s": parse_s,
        "m": parse_m,
        "bg": parse_bg,
        "n": parse_n,
        "any": parse_any
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "text";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_text() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        result1 = parse_text_tags();
        if (result1 === null) {
          result1 = parse_tags();
          if (result1 === null) {
            result1 = parse_any();
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_text_tags();
          if (result1 === null) {
            result1 = parse_tags();
            if (result1 === null) {
              result1 = parse_any();
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, text) { return peg_flatten(text).join(''); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_text_tags() {
        var result0;
        
        result0 = parse_imag();
        if (result0 === null) {
          result0 = parse_multicols();
          if (result0 === null) {
            result0 = parse_center();
            if (result0 === null) {
              result0 = parse_left();
              if (result0 === null) {
                result0 = parse_right();
                if (result0 === null) {
                  result0 = parse_justify();
                  if (result0 === null) {
                    result0 = parse_serif();
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_imag() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 32117) {
            result1 = "\u7D75";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u7D75\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_num();
            if (result2 !== null) {
              result3 = parse_ket();
              if (result3 !== null) {
                result4 = parse_newline();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, num) { return '<div class="imag"><div class="imag_test">' + num + '</div></div>' + "\n"; })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_multicols() {
        var result0;
        
        result0 = parse_multicols_2();
        if (result0 === null) {
          result0 = parse_multicols_3();
        }
        return result0;
      }
      
      function parse_multicols_2() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          result1 = parse_multi();
          if (result1 !== null) {
            if (/^[2\uFF12]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[2\\uFF12]");
              }
            }
            if (result2 !== null) {
              result3 = parse_ket();
              if (result3 !== null) {
                result4 = parse_newline();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  pos2 = pos;
                  result5 = parse_align();
                  if (result5 !== null) {
                    result6 = parse_align();
                    if (result6 !== null) {
                      result5 = [result5, result6];
                    } else {
                      result5 = null;
                      pos = pos2;
                    }
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, inner) { return '<div class="multicols_2">' + peg_flatten(inner).join('') + '</div>' + "\n"; })(pos0, result0[5]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_multicols_3() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          result1 = parse_multi();
          if (result1 !== null) {
            if (/^[3\uFF13]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[3\\uFF13]");
              }
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_ket();
              if (result3 !== null) {
                result4 = parse_newline();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  pos2 = pos;
                  result5 = parse_align();
                  if (result5 !== null) {
                    result6 = parse_align();
                    if (result6 !== null) {
                      result7 = parse_align();
                      if (result7 !== null) {
                        result5 = [result5, result6, result7];
                      } else {
                        result5 = null;
                        pos = pos2;
                      }
                    } else {
                      result5 = null;
                      pos = pos2;
                    }
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, inner) { return '<div class="multicols_3">' + peg_flatten(inner).join('') + '</div>' + "\n"; })(pos0, result0[5]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_align() {
        var result0;
        
        result0 = parse_left();
        if (result0 === null) {
          result0 = parse_center();
          if (result0 === null) {
            result0 = parse_right();
          }
        }
        return result0;
      }
      
      function parse_center() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          result1 = parse_c();
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result3 = parse_newline();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                pos2 = pos;
                pos3 = pos;
                reportFailures++;
                result5 = parse_text_tags();
                reportFailures--;
                if (result5 === null) {
                  result5 = "";
                } else {
                  result5 = null;
                  pos = pos3;
                }
                if (result5 !== null) {
                  result6 = parse_tags();
                  if (result6 === null) {
                    result6 = parse_any();
                  }
                  if (result6 !== null) {
                    result5 = [result5, result6];
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                } else {
                  result5 = null;
                  pos = pos2;
                }
                if (result5 !== null) {
                  result4 = [];
                  while (result5 !== null) {
                    result4.push(result5);
                    pos2 = pos;
                    pos3 = pos;
                    reportFailures++;
                    result5 = parse_text_tags();
                    reportFailures--;
                    if (result5 === null) {
                      result5 = "";
                    } else {
                      result5 = null;
                      pos = pos3;
                    }
                    if (result5 !== null) {
                      result6 = parse_tags();
                      if (result6 === null) {
                        result6 = parse_any();
                      }
                      if (result6 !== null) {
                        result5 = [result5, result6];
                      } else {
                        result5 = null;
                        pos = pos2;
                      }
                    } else {
                      result5 = null;
                      pos = pos2;
                    }
                  }
                } else {
                  result4 = null;
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, inner) { return '<div class="align_center">'   + peg_flatten(inner).join('') + '</div>' + "\n"; })(pos0, result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_left() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          result1 = parse_l();
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result3 = parse_newline();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                pos2 = pos;
                pos3 = pos;
                reportFailures++;
                result5 = parse_text_tags();
                reportFailures--;
                if (result5 === null) {
                  result5 = "";
                } else {
                  result5 = null;
                  pos = pos3;
                }
                if (result5 !== null) {
                  result6 = parse_tags();
                  if (result6 === null) {
                    result6 = parse_any();
                  }
                  if (result6 !== null) {
                    result5 = [result5, result6];
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                } else {
                  result5 = null;
                  pos = pos2;
                }
                if (result5 !== null) {
                  result4 = [];
                  while (result5 !== null) {
                    result4.push(result5);
                    pos2 = pos;
                    pos3 = pos;
                    reportFailures++;
                    result5 = parse_text_tags();
                    reportFailures--;
                    if (result5 === null) {
                      result5 = "";
                    } else {
                      result5 = null;
                      pos = pos3;
                    }
                    if (result5 !== null) {
                      result6 = parse_tags();
                      if (result6 === null) {
                        result6 = parse_any();
                      }
                      if (result6 !== null) {
                        result5 = [result5, result6];
                      } else {
                        result5 = null;
                        pos = pos2;
                      }
                    } else {
                      result5 = null;
                      pos = pos2;
                    }
                  }
                } else {
                  result4 = null;
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, inner) { return '<div class="align_left">'     + peg_flatten(inner).join('') + '</div>' + "\n"; })(pos0, result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_right() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          result1 = parse_r();
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result3 = parse_newline();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                pos2 = pos;
                pos3 = pos;
                reportFailures++;
                result5 = parse_text_tags();
                reportFailures--;
                if (result5 === null) {
                  result5 = "";
                } else {
                  result5 = null;
                  pos = pos3;
                }
                if (result5 !== null) {
                  result6 = parse_tags();
                  if (result6 === null) {
                    result6 = parse_any();
                  }
                  if (result6 !== null) {
                    result5 = [result5, result6];
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                } else {
                  result5 = null;
                  pos = pos2;
                }
                if (result5 !== null) {
                  result4 = [];
                  while (result5 !== null) {
                    result4.push(result5);
                    pos2 = pos;
                    pos3 = pos;
                    reportFailures++;
                    result5 = parse_text_tags();
                    reportFailures--;
                    if (result5 === null) {
                      result5 = "";
                    } else {
                      result5 = null;
                      pos = pos3;
                    }
                    if (result5 !== null) {
                      result6 = parse_tags();
                      if (result6 === null) {
                        result6 = parse_any();
                      }
                      if (result6 !== null) {
                        result5 = [result5, result6];
                      } else {
                        result5 = null;
                        pos = pos2;
                      }
                    } else {
                      result5 = null;
                      pos = pos2;
                    }
                  }
                } else {
                  result4 = null;
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, inner) { return '<div class="align_right">'    + peg_flatten(inner).join('') + '</div>' + "\n"; })(pos0, result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_justify() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          result1 = parse_j();
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result3 = parse_newline();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                pos2 = pos;
                pos3 = pos;
                reportFailures++;
                result5 = parse_text_tags();
                reportFailures--;
                if (result5 === null) {
                  result5 = "";
                } else {
                  result5 = null;
                  pos = pos3;
                }
                if (result5 !== null) {
                  result6 = parse_tags();
                  if (result6 === null) {
                    result6 = parse_any();
                  }
                  if (result6 !== null) {
                    result5 = [result5, result6];
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                } else {
                  result5 = null;
                  pos = pos2;
                }
                if (result5 !== null) {
                  result4 = [];
                  while (result5 !== null) {
                    result4.push(result5);
                    pos2 = pos;
                    pos3 = pos;
                    reportFailures++;
                    result5 = parse_text_tags();
                    reportFailures--;
                    if (result5 === null) {
                      result5 = "";
                    } else {
                      result5 = null;
                      pos = pos3;
                    }
                    if (result5 !== null) {
                      result6 = parse_tags();
                      if (result6 === null) {
                        result6 = parse_any();
                      }
                      if (result6 !== null) {
                        result5 = [result5, result6];
                      } else {
                        result5 = null;
                        pos = pos2;
                      }
                    } else {
                      result5 = null;
                      pos = pos2;
                    }
                  }
                } else {
                  result4 = null;
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, inner) { return '<div class="align_justify">'  + peg_flatten(inner).join('') + '</div>' + "\n"; })(pos0, result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_serif() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        reportFailures++;
        result0 = parse_icon_l();
        if (result0 === null) {
          result0 = parse_icon_r();
        }
        reportFailures--;
        if (result0 !== null) {
          result0 = "";
          pos = pos1;
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_message();
          if (result1 !== null) {
            result2 = parse_newline();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_messages() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_message();
        if (result0 !== null) {
          result1 = parse_newline();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result3 = parse_serif();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_serif();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 === null) {
          result0 = parse_message();
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result0 = (function(offset, messages) { return peg_flatten(messages).join(''); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_message() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_icon();
        if (result0 !== null) {
          result1 = parse_speaker();
          if (result1 !== null) {
            result2 = parse_balloon();
            if (result2 !== null) {
              result3 = parse_newline();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                pos2 = pos;
                pos3 = pos;
                reportFailures++;
                result5 = parse_text_tags();
                reportFailures--;
                if (result5 === null) {
                  result5 = "";
                } else {
                  result5 = null;
                  pos = pos3;
                }
                if (result5 !== null) {
                  result6 = parse_tags();
                  if (result6 === null) {
                    result6 = parse_any();
                  }
                  if (result6 !== null) {
                    result5 = [result5, result6];
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                } else {
                  result5 = null;
                  pos = pos2;
                }
                if (result5 !== null) {
                  result4 = [];
                  while (result5 !== null) {
                    result4.push(result5);
                    pos2 = pos;
                    pos3 = pos;
                    reportFailures++;
                    result5 = parse_text_tags();
                    reportFailures--;
                    if (result5 === null) {
                      result5 = "";
                    } else {
                      result5 = null;
                      pos = pos3;
                    }
                    if (result5 !== null) {
                      result6 = parse_tags();
                      if (result6 === null) {
                        result6 = parse_any();
                      }
                      if (result6 !== null) {
                        result5 = [result5, result6];
                      } else {
                        result5 = null;
                        pos = pos2;
                      }
                    } else {
                      result5 = null;
                      pos = pos2;
                    }
                  }
                } else {
                  result4 = null;
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, icon, speaker, balloon, message) {
          if(icon[0]=='l') {
            return '<div class="serif left"><div class="icon"><div class="icon_test">'  + icon[1] + '</div>' + speaker + '</div>' + '<div class="balloon' + balloon + '">' + peg_flatten(message).join('') + '</div></div>' + "\n";
          }else{
            return '<div class="serif right"><div class="icon"><div class="icon_test">' + icon[1] + '</div>' + speaker + '</div>' + '<div class="balloon' + balloon + '">' + peg_flatten(message).join('') + '</div></div>' + "\n";
          }
        })(pos0, result0[0], result0[1], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_icon() {
        var result0;
        var pos0;
        
        result0 = parse_icon_l();
        if (result0 === null) {
          result0 = parse_icon_r();
          if (result0 === null) {
            pos0 = pos;
            result0 = "";
            if (result0 !== null) {
              result0 = (function(offset) { return ['l',   0]; })(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
          }
        }
        return result0;
      }
      
      function parse_icon_l() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 24038) {
            result1 = "\u5DE6";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u5DE6\"");
            }
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_num();
            if (result2 !== null) {
              result3 = parse_ket();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, num) { return ['l', num]; })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_icon_r() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 21491) {
            result1 = "\u53F3";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u53F3\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_num();
            if (result2 !== null) {
              result3 = parse_ket();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, num) { return ['r', num]; })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_speaker() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result2 = parse_ket();
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result3 = parse_any();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              pos2 = pos;
              pos3 = pos;
              reportFailures++;
              result2 = parse_ket();
              reportFailures--;
              if (result2 === null) {
                result2 = "";
              } else {
                result2 = null;
                pos = pos3;
              }
              if (result2 !== null) {
                result3 = parse_any();
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, speaker) { return peg_flatten(speaker).join(''); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = "";
          if (result0 !== null) {
            result0 = (function(offset) { return '愛称'; })(pos0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_balloon() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (/^[\u8003\u7121]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[\\u8003\\u7121]");
            }
          }
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, balloon) {
          var ba = {
            '考' : ' think',
            '無' : ' no'
          }
          return ba[balloon];
        })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          result0 = "";
        }
        return result0;
      }
      
      function parse_tags() {
        var result0;
        
        result0 = parse_self();
        if (result0 === null) {
          result0 = parse_target();
          if (result0 === null) {
            result0 = parse_newline();
            if (result0 === null) {
              result0 = parse_bold();
              if (result0 === null) {
                result0 = parse_italic();
                if (result0 === null) {
                  result0 = parse_delete();
                  if (result0 === null) {
                    result0 = parse_under();
                    if (result0 === null) {
                      result0 = parse_big();
                      if (result0 === null) {
                        result0 = parse_small();
                        if (result0 === null) {
                          result0 = parse_ruby();
                          if (result0 === null) {
                            result0 = parse_font_color();
                            if (result0 === null) {
                              result0 = parse_thin_tag();
                              if (result0 === null) {
                                result0 = parse_middle_tag();
                                if (result0 === null) {
                                  result0 = parse_font_color0_tag();
                                  if (result0 === null) {
                                    result0 = parse_normal_tag();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_self() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (input.substr(pos, 2) === "\u81EA\u5206") {
            result1 = "\u81EA\u5206";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u81EA\\u5206\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) { return '「自分の愛称」'; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_target() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (input.substr(pos, 2) === "\u5BFE\u8C61") {
            result1 = "\u5BFE\u8C61";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u5BFE\\u8C61\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) { return '「対象の愛称」'; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_newline() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[\n\r]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\n\\r]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) { return '<br>'; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_bold() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bold_tag();
        if (result0 !== null) {
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result2 = parse_text_tags();
          if (result2 === null) {
            result2 = parse_normal_tag();
            if (result2 === null) {
              result2 = parse_thin_tag();
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result3 = parse_tags();
            if (result3 === null) {
              result3 = parse_any();
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              pos2 = pos;
              pos3 = pos;
              reportFailures++;
              result2 = parse_text_tags();
              if (result2 === null) {
                result2 = parse_normal_tag();
                if (result2 === null) {
                  result2 = parse_thin_tag();
                }
              }
              reportFailures--;
              if (result2 === null) {
                result2 = "";
              } else {
                result2 = null;
                pos = pos3;
              }
              if (result2 !== null) {
                result3 = parse_tags();
                if (result3 === null) {
                  result3 = parse_any();
                }
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            result2 = parse_thin_tag();
            if (result2 === null) {
              result2 = parse_normal_tag();
            }
            result2 = result2 !== null ? result2 : "";
            reportFailures--;
            if (result2 !== null) {
              result2 = "";
              pos = pos2;
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, inner) { return '<b>'     + peg_flatten(inner).join('') +     '</b>'; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_italic() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_italic_tag();
        if (result0 !== null) {
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result2 = parse_text_tags();
          if (result2 === null) {
            result2 = parse_normal_tag();
            if (result2 === null) {
              result2 = parse_italic_tag();
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result3 = parse_tags();
            if (result3 === null) {
              result3 = parse_any();
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              pos2 = pos;
              pos3 = pos;
              reportFailures++;
              result2 = parse_text_tags();
              if (result2 === null) {
                result2 = parse_normal_tag();
                if (result2 === null) {
                  result2 = parse_italic_tag();
                }
              }
              reportFailures--;
              if (result2 === null) {
                result2 = "";
              } else {
                result2 = null;
                pos = pos3;
              }
              if (result2 !== null) {
                result3 = parse_tags();
                if (result3 === null) {
                  result3 = parse_any();
                }
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_italic_tag();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              pos2 = pos;
              reportFailures++;
              result3 = parse_normal_tag();
              result3 = result3 !== null ? result3 : "";
              reportFailures--;
              if (result3 !== null) {
                result3 = "";
                pos = pos2;
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, inner) { return '<i>'     + peg_flatten(inner).join('') +     '</i>'; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_delete() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_delete_tag();
        if (result0 !== null) {
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result2 = parse_text_tags();
          if (result2 === null) {
            result2 = parse_normal_tag();
            if (result2 === null) {
              result2 = parse_delete_tag();
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result3 = parse_tags();
            if (result3 === null) {
              result3 = parse_any();
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              pos2 = pos;
              pos3 = pos;
              reportFailures++;
              result2 = parse_text_tags();
              if (result2 === null) {
                result2 = parse_normal_tag();
                if (result2 === null) {
                  result2 = parse_delete_tag();
                }
              }
              reportFailures--;
              if (result2 === null) {
                result2 = "";
              } else {
                result2 = null;
                pos = pos3;
              }
              if (result2 !== null) {
                result3 = parse_tags();
                if (result3 === null) {
                  result3 = parse_any();
                }
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_delete_tag();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              pos2 = pos;
              reportFailures++;
              result3 = parse_normal_tag();
              result3 = result3 !== null ? result3 : "";
              reportFailures--;
              if (result3 !== null) {
                result3 = "";
                pos = pos2;
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, inner) { return '<del>'   + peg_flatten(inner).join('') +   '</del>'; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_under() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_under_tag();
        if (result0 !== null) {
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result2 = parse_text_tags();
          if (result2 === null) {
            result2 = parse_normal_tag();
            if (result2 === null) {
              result2 = parse_under_tag();
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result3 = parse_tags();
            if (result3 === null) {
              result3 = parse_any();
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              pos2 = pos;
              pos3 = pos;
              reportFailures++;
              result2 = parse_text_tags();
              if (result2 === null) {
                result2 = parse_normal_tag();
                if (result2 === null) {
                  result2 = parse_under_tag();
                }
              }
              reportFailures--;
              if (result2 === null) {
                result2 = "";
              } else {
                result2 = null;
                pos = pos3;
              }
              if (result2 !== null) {
                result3 = parse_tags();
                if (result3 === null) {
                  result3 = parse_any();
                }
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_under_tag();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              pos2 = pos;
              reportFailures++;
              result3 = parse_normal_tag();
              result3 = result3 !== null ? result3 : "";
              reportFailures--;
              if (result3 !== null) {
                result3 = "";
                pos = pos2;
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, inner) { return '<u>'     + peg_flatten(inner).join('') +     '</u>'; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_big() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_big_tag();
        if (result0 !== null) {
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result2 = parse_text_tags();
          if (result2 === null) {
            result2 = parse_normal_tag();
            if (result2 === null) {
              result2 = parse_middle_tag();
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result3 = parse_tags();
            if (result3 === null) {
              result3 = parse_any();
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              pos2 = pos;
              pos3 = pos;
              reportFailures++;
              result2 = parse_text_tags();
              if (result2 === null) {
                result2 = parse_normal_tag();
                if (result2 === null) {
                  result2 = parse_middle_tag();
                }
              }
              reportFailures--;
              if (result2 === null) {
                result2 = "";
              } else {
                result2 = null;
                pos = pos3;
              }
              if (result2 !== null) {
                result3 = parse_tags();
                if (result3 === null) {
                  result3 = parse_any();
                }
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            result2 = parse_middle_tag();
            if (result2 === null) {
              result2 = parse_normal_tag();
            }
            result2 = result2 !== null ? result2 : "";
            reportFailures--;
            if (result2 !== null) {
              result2 = "";
              pos = pos2;
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, inner) { return '<big>'   + peg_flatten(inner).join('') +   '</big>'; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_small() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_small_tag();
        if (result0 !== null) {
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result2 = parse_text_tags();
          if (result2 === null) {
            result2 = parse_normal_tag();
            if (result2 === null) {
              result2 = parse_middle_tag();
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result3 = parse_tags();
            if (result3 === null) {
              result3 = parse_any();
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              pos2 = pos;
              pos3 = pos;
              reportFailures++;
              result2 = parse_text_tags();
              if (result2 === null) {
                result2 = parse_normal_tag();
                if (result2 === null) {
                  result2 = parse_middle_tag();
                }
              }
              reportFailures--;
              if (result2 === null) {
                result2 = "";
              } else {
                result2 = null;
                pos = pos3;
              }
              if (result2 !== null) {
                result3 = parse_tags();
                if (result3 === null) {
                  result3 = parse_any();
                }
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            result2 = parse_middle_tag();
            if (result2 === null) {
              result2 = parse_normal_tag();
            }
            result2 = result2 !== null ? result2 : "";
            reportFailures--;
            if (result2 !== null) {
              result2 = "";
              pos = pos2;
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, inner) { return '<small>' + peg_flatten(inner).join('') + '</small>'; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ruby() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result2 = parse_text_tags();
          if (result2 === null) {
            result2 = parse_ruby();
            if (result2 === null) {
              result2 = parse_ket();
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result3 = parse_tags();
            if (result3 === null) {
              result3 = parse_any();
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              pos2 = pos;
              pos3 = pos;
              reportFailures++;
              result2 = parse_text_tags();
              if (result2 === null) {
                result2 = parse_ruby();
                if (result2 === null) {
                  result2 = parse_ket();
                }
              }
              reportFailures--;
              if (result2 === null) {
                result2 = "";
              } else {
                result2 = null;
                pos = pos3;
              }
              if (result2 !== null) {
                result3 = parse_tags();
                if (result3 === null) {
                  result3 = parse_any();
                }
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 94) {
                result3 = "^";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"^\"");
                }
              }
              if (result3 === null) {
                if (input.charCodeAt(pos) === 65342) {
                  result3 = "\uFF3E";
                  pos++;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\uFF3E\"");
                  }
                }
              }
              if (result3 !== null) {
                result4 = parse_bra();
                if (result4 !== null) {
                  pos2 = pos;
                  pos3 = pos;
                  reportFailures++;
                  result6 = parse_text_tags();
                  if (result6 === null) {
                    result6 = parse_ruby();
                    if (result6 === null) {
                      result6 = parse_ket();
                    }
                  }
                  reportFailures--;
                  if (result6 === null) {
                    result6 = "";
                  } else {
                    result6 = null;
                    pos = pos3;
                  }
                  if (result6 !== null) {
                    result7 = parse_tags();
                    if (result7 === null) {
                      result7 = parse_any();
                    }
                    if (result7 !== null) {
                      result6 = [result6, result7];
                    } else {
                      result6 = null;
                      pos = pos2;
                    }
                  } else {
                    result6 = null;
                    pos = pos2;
                  }
                  if (result6 !== null) {
                    result5 = [];
                    while (result6 !== null) {
                      result5.push(result6);
                      pos2 = pos;
                      pos3 = pos;
                      reportFailures++;
                      result6 = parse_text_tags();
                      if (result6 === null) {
                        result6 = parse_ruby();
                        if (result6 === null) {
                          result6 = parse_ket();
                        }
                      }
                      reportFailures--;
                      if (result6 === null) {
                        result6 = "";
                      } else {
                        result6 = null;
                        pos = pos3;
                      }
                      if (result6 !== null) {
                        result7 = parse_tags();
                        if (result7 === null) {
                          result7 = parse_any();
                        }
                        if (result7 !== null) {
                          result6 = [result6, result7];
                        } else {
                          result6 = null;
                          pos = pos2;
                        }
                      } else {
                        result6 = null;
                        pos = pos2;
                      }
                    }
                  } else {
                    result5 = null;
                  }
                  if (result5 !== null) {
                    result6 = parse_ket();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, rb, rt) {
          return '<span class="ruby"><span class="rb">' + peg_flatten(rb).join('') + '</span><span class="rp">(</span><span class="rt">' + peg_flatten(rt).join('') + '</span><span class="rp">)</span></span>';
        })(pos0, result0[1], result0[5]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_font_color() {
        var result0;
        
        result0 = parse_font_color1();
        if (result0 === null) {
          result0 = parse_font_color2();
          if (result0 === null) {
            result0 = parse_font_color3();
            if (result0 === null) {
              result0 = parse_font_color4();
              if (result0 === null) {
                result0 = parse_font_color5();
                if (result0 === null) {
                  result0 = parse_font_color6();
                  if (result0 === null) {
                    result0 = parse_font_color7();
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_font_color1() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_font_color1_tag();
        if (result0 !== null) {
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result2 = parse_text_tags();
          if (result2 === null) {
            result2 = parse_normal_tag();
            if (result2 === null) {
              result2 = parse_font_color_tag();
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result3 = parse_tags();
            if (result3 === null) {
              result3 = parse_any();
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              pos2 = pos;
              pos3 = pos;
              reportFailures++;
              result2 = parse_text_tags();
              if (result2 === null) {
                result2 = parse_normal_tag();
                if (result2 === null) {
                  result2 = parse_font_color_tag();
                }
              }
              reportFailures--;
              if (result2 === null) {
                result2 = "";
              } else {
                result2 = null;
                pos = pos3;
              }
              if (result2 !== null) {
                result3 = parse_tags();
                if (result3 === null) {
                  result3 = parse_any();
                }
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_font_color1_tag();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              pos2 = pos;
              reportFailures++;
              result3 = parse_font_color0_tag();
              if (result3 === null) {
                result3 = parse_normal_tag();
              }
              result3 = result3 !== null ? result3 : "";
              reportFailures--;
              if (result3 !== null) {
                result3 = "";
                pos = pos2;
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, inner) { return '<font color="#FF0000">' + peg_flatten(inner).join('') + '</font>'; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_font_color2() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_font_color2_tag();
        if (result0 !== null) {
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result2 = parse_text_tags();
          if (result2 === null) {
            result2 = parse_normal_tag();
            if (result2 === null) {
              result2 = parse_font_color_tag();
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result3 = parse_tags();
            if (result3 === null) {
              result3 = parse_any();
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              pos2 = pos;
              pos3 = pos;
              reportFailures++;
              result2 = parse_text_tags();
              if (result2 === null) {
                result2 = parse_normal_tag();
                if (result2 === null) {
                  result2 = parse_font_color_tag();
                }
              }
              reportFailures--;
              if (result2 === null) {
                result2 = "";
              } else {
                result2 = null;
                pos = pos3;
              }
              if (result2 !== null) {
                result3 = parse_tags();
                if (result3 === null) {
                  result3 = parse_any();
                }
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_font_color2_tag();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              pos2 = pos;
              reportFailures++;
              result3 = parse_font_color0_tag();
              if (result3 === null) {
                result3 = parse_normal_tag();
              }
              result3 = result3 !== null ? result3 : "";
              reportFailures--;
              if (result3 !== null) {
                result3 = "";
                pos = pos2;
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, inner) { return '<font color="#FFA500">' + peg_flatten(inner).join('') + '</font>'; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_font_color3() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_font_color3_tag();
        if (result0 !== null) {
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result2 = parse_text_tags();
          if (result2 === null) {
            result2 = parse_normal_tag();
            if (result2 === null) {
              result2 = parse_font_color_tag();
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result3 = parse_tags();
            if (result3 === null) {
              result3 = parse_any();
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              pos2 = pos;
              pos3 = pos;
              reportFailures++;
              result2 = parse_text_tags();
              if (result2 === null) {
                result2 = parse_normal_tag();
                if (result2 === null) {
                  result2 = parse_font_color_tag();
                }
              }
              reportFailures--;
              if (result2 === null) {
                result2 = "";
              } else {
                result2 = null;
                pos = pos3;
              }
              if (result2 !== null) {
                result3 = parse_tags();
                if (result3 === null) {
                  result3 = parse_any();
                }
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_font_color3_tag();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              pos2 = pos;
              reportFailures++;
              result3 = parse_font_color0_tag();
              if (result3 === null) {
                result3 = parse_normal_tag();
              }
              result3 = result3 !== null ? result3 : "";
              reportFailures--;
              if (result3 !== null) {
                result3 = "";
                pos = pos2;
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, inner) { return '<font color="#FFFF00">' + peg_flatten(inner).join('') + '</font>'; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_font_color4() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_font_color4_tag();
        if (result0 !== null) {
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result2 = parse_text_tags();
          if (result2 === null) {
            result2 = parse_normal_tag();
            if (result2 === null) {
              result2 = parse_font_color_tag();
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result3 = parse_tags();
            if (result3 === null) {
              result3 = parse_any();
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              pos2 = pos;
              pos3 = pos;
              reportFailures++;
              result2 = parse_text_tags();
              if (result2 === null) {
                result2 = parse_normal_tag();
                if (result2 === null) {
                  result2 = parse_font_color_tag();
                }
              }
              reportFailures--;
              if (result2 === null) {
                result2 = "";
              } else {
                result2 = null;
                pos = pos3;
              }
              if (result2 !== null) {
                result3 = parse_tags();
                if (result3 === null) {
                  result3 = parse_any();
                }
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_font_color4_tag();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              pos2 = pos;
              reportFailures++;
              result3 = parse_font_color0_tag();
              if (result3 === null) {
                result3 = parse_normal_tag();
              }
              result3 = result3 !== null ? result3 : "";
              reportFailures--;
              if (result3 !== null) {
                result3 = "";
                pos = pos2;
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, inner) { return '<font color="#00FF00">' + peg_flatten(inner).join('') + '</font>'; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_font_color5() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_font_color5_tag();
        if (result0 !== null) {
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result2 = parse_text_tags();
          if (result2 === null) {
            result2 = parse_normal_tag();
            if (result2 === null) {
              result2 = parse_font_color_tag();
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result3 = parse_tags();
            if (result3 === null) {
              result3 = parse_any();
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              pos2 = pos;
              pos3 = pos;
              reportFailures++;
              result2 = parse_text_tags();
              if (result2 === null) {
                result2 = parse_normal_tag();
                if (result2 === null) {
                  result2 = parse_font_color_tag();
                }
              }
              reportFailures--;
              if (result2 === null) {
                result2 = "";
              } else {
                result2 = null;
                pos = pos3;
              }
              if (result2 !== null) {
                result3 = parse_tags();
                if (result3 === null) {
                  result3 = parse_any();
                }
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_font_color5_tag();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              pos2 = pos;
              reportFailures++;
              result3 = parse_font_color0_tag();
              if (result3 === null) {
                result3 = parse_normal_tag();
              }
              result3 = result3 !== null ? result3 : "";
              reportFailures--;
              if (result3 !== null) {
                result3 = "";
                pos = pos2;
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, inner) { return '<font color="#0000FF">' + peg_flatten(inner).join('') + '</font>'; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_font_color6() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_font_color6_tag();
        if (result0 !== null) {
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result2 = parse_text_tags();
          if (result2 === null) {
            result2 = parse_normal_tag();
            if (result2 === null) {
              result2 = parse_font_color_tag();
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result3 = parse_tags();
            if (result3 === null) {
              result3 = parse_any();
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              pos2 = pos;
              pos3 = pos;
              reportFailures++;
              result2 = parse_text_tags();
              if (result2 === null) {
                result2 = parse_normal_tag();
                if (result2 === null) {
                  result2 = parse_font_color_tag();
                }
              }
              reportFailures--;
              if (result2 === null) {
                result2 = "";
              } else {
                result2 = null;
                pos = pos3;
              }
              if (result2 !== null) {
                result3 = parse_tags();
                if (result3 === null) {
                  result3 = parse_any();
                }
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_font_color6_tag();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              pos2 = pos;
              reportFailures++;
              result3 = parse_font_color0_tag();
              if (result3 === null) {
                result3 = parse_normal_tag();
              }
              result3 = result3 !== null ? result3 : "";
              reportFailures--;
              if (result3 !== null) {
                result3 = "";
                pos = pos2;
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, inner) { return '<font color="#000080">' + peg_flatten(inner).join('') + '</font>'; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_font_color7() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_font_color7_tag();
        if (result0 !== null) {
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result2 = parse_text_tags();
          if (result2 === null) {
            result2 = parse_normal_tag();
            if (result2 === null) {
              result2 = parse_font_color_tag();
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result3 = parse_tags();
            if (result3 === null) {
              result3 = parse_any();
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              pos2 = pos;
              pos3 = pos;
              reportFailures++;
              result2 = parse_text_tags();
              if (result2 === null) {
                result2 = parse_normal_tag();
                if (result2 === null) {
                  result2 = parse_font_color_tag();
                }
              }
              reportFailures--;
              if (result2 === null) {
                result2 = "";
              } else {
                result2 = null;
                pos = pos3;
              }
              if (result2 !== null) {
                result3 = parse_tags();
                if (result3 === null) {
                  result3 = parse_any();
                }
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_font_color7_tag();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              pos2 = pos;
              reportFailures++;
              result3 = parse_font_color0_tag();
              if (result3 === null) {
                result3 = parse_normal_tag();
              }
              result3 = result3 !== null ? result3 : "";
              reportFailures--;
              if (result3 !== null) {
                result3 = "";
                pos = pos2;
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, inner) { return '<font color="#800080">' + peg_flatten(inner).join('') + '</font>'; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_bold_tag() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          result1 = parse_b();
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_thin_tag() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          result1 = parse_t();
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) { return ''; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_italic_tag() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          result1 = parse_i();
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_delete_tag() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          result1 = parse_d();
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_under_tag() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          result1 = parse_u();
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_small_tag() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          result1 = parse_s();
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_middle_tag() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          result1 = parse_m();
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) { return ''; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_big_tag() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          result1 = parse_bg();
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_font_color_tag() {
        var result0;
        
        result0 = parse_font_color0_tag();
        if (result0 === null) {
          result0 = parse_font_color1_tag();
          if (result0 === null) {
            result0 = parse_font_color2_tag();
            if (result0 === null) {
              result0 = parse_font_color3_tag();
              if (result0 === null) {
                result0 = parse_font_color4_tag();
                if (result0 === null) {
                  result0 = parse_font_color5_tag();
                  if (result0 === null) {
                    result0 = parse_font_color6_tag();
                    if (result0 === null) {
                      result0 = parse_font_color7_tag();
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_font_color0_tag() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 40658) {
            result1 = "\u9ED2";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u9ED2\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) { return ''; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_font_color1_tag() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 36196) {
            result1 = "\u8D64";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u8D64\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_font_color2_tag() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 27225) {
            result1 = "\u6A59";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u6A59\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_font_color3_tag() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 40644) {
            result1 = "\u9EC4";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u9EC4\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_font_color4_tag() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 32209) {
            result1 = "\u7DD1";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u7DD1\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_font_color5_tag() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 38738) {
            result1 = "\u9752";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u9752\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_font_color6_tag() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 34253) {
            result1 = "\u85CD";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u85CD\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_font_color7_tag() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 32043) {
            result1 = "\u7D2B";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u7D2B\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_normal_tag() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          result1 = parse_n();
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) { return ''; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_num() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_n1_9();
        if (result0 !== null) {
          result2 = parse_n0_9();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_n0_9();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 === null) {
          result0 = parse_n0_9();
        }
        if (result0 !== null) {
          result0 = (function(offset, num) { return peg_cast_num(peg_flatten(num).join("")); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_bra() {
        var result0;
        
        if (/^[<\uFF1C]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[<\\uFF1C]");
          }
        }
        return result0;
      }
      
      function parse_ket() {
        var result0;
        
        if (/^[>\uFF1E]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[>\\uFF1E]");
          }
        }
        return result0;
      }
      
      function parse_n1_9() {
        var result0;
        
        if (/^[1-9\uFF11-\uFF19]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[1-9\\uFF11-\\uFF19]");
          }
        }
        return result0;
      }
      
      function parse_n0_9() {
        var result0;
        
        if (/^[0-9\uFF10-\uFF19]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9\\uFF10-\\uFF19]");
          }
        }
        return result0;
      }
      
      function parse_multi() {
        var result0;
        
        if (input.charCodeAt(pos) === 35079) {
          result0 = "\u8907";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u8907\"");
          }
        }
        return result0;
      }
      
      function parse_l() {
        var result0;
        
        if (input.substr(pos, 2) === "\u5DE6\u5BC4") {
          result0 = "\u5DE6\u5BC4";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u5DE6\\u5BC4\"");
          }
        }
        return result0;
      }
      
      function parse_r() {
        var result0;
        
        if (input.substr(pos, 2) === "\u53F3\u5BC4") {
          result0 = "\u53F3\u5BC4";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u53F3\\u5BC4\"");
          }
        }
        return result0;
      }
      
      function parse_c() {
        var result0;
        
        if (input.substr(pos, 2) === "\u4E2D\u5BC4") {
          result0 = "\u4E2D\u5BC4";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u4E2D\\u5BC4\"");
          }
        }
        return result0;
      }
      
      function parse_j() {
        var result0;
        
        if (input.charCodeAt(pos) === 22343) {
          result0 = "\u5747";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u5747\"");
          }
        }
        return result0;
      }
      
      function parse_b() {
        var result0;
        
        if (input.charCodeAt(pos) === 22826) {
          result0 = "\u592A";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u592A\"");
          }
        }
        return result0;
      }
      
      function parse_t() {
        var result0;
        
        if (input.charCodeAt(pos) === 32048) {
          result0 = "\u7D30";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u7D30\"");
          }
        }
        return result0;
      }
      
      function parse_i() {
        var result0;
        
        if (input.charCodeAt(pos) === 26012) {
          result0 = "\u659C";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u659C\"");
          }
        }
        return result0;
      }
      
      function parse_d() {
        var result0;
        
        if (input.charCodeAt(pos) === 28040) {
          result0 = "\u6D88";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u6D88\"");
          }
        }
        return result0;
      }
      
      function parse_u() {
        var result0;
        
        if (input.charCodeAt(pos) === 19979) {
          result0 = "\u4E0B";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u4E0B\"");
          }
        }
        return result0;
      }
      
      function parse_s() {
        var result0;
        
        if (input.charCodeAt(pos) === 23567) {
          result0 = "\u5C0F";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u5C0F\"");
          }
        }
        return result0;
      }
      
      function parse_m() {
        var result0;
        
        if (input.charCodeAt(pos) === 20013) {
          result0 = "\u4E2D";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u4E2D\"");
          }
        }
        return result0;
      }
      
      function parse_bg() {
        var result0;
        
        if (input.charCodeAt(pos) === 22823) {
          result0 = "\u5927";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u5927\"");
          }
        }
        return result0;
      }
      
      function parse_n() {
        var result0;
        
        if (input.charCodeAt(pos) === 20803) {
          result0 = "\u5143";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u5143\"");
          }
        }
        return result0;
      }
      
      function parse_any() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.length > pos) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("any character");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, any) {
          any  = any.replace(/</, '&lt;');
          return any.replace(/>/, '&gt;');
        })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
