parser = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "bra": parse_bra,
        "ket": parse_ket,
        "separator": parse_separator,
        "plus": parse_plus,
        "n1_9": parse_n1_9,
        "n0_9": parse_n0_9,
        "a_f": parse_a_f,
        "RGB": parse_RGB,
        "non_negative_integer": parse_non_negative_integer,
        "any": parse_any,
        "bold": parse_bold,
        "big": parse_big,
        "small": parse_small,
        "italic": parse_italic,
        "delete": parse_delete,
        "under": parse_under,
        "thin": parse_thin,
        "middle": parse_middle,
        "normal": parse_normal,
        "default_color": parse_default_color,
        "color": parse_color,
        "tag_ruby": parse_tag_ruby,
        "tag_bold": parse_tag_bold,
        "tag_big": parse_tag_big,
        "tag_small": parse_tag_small,
        "tag_italic": parse_tag_italic,
        "tag_delete": parse_tag_delete,
        "tag_under": parse_tag_under,
        "tag_color": parse_tag_color,
        "tag_thin": parse_tag_thin,
        "tag_middle": parse_tag_middle,
        "tag_normal": parse_tag_normal,
        "tag_default_color": parse_tag_default_color,
        "string_tags": parse_string_tags,
        "string": parse_string,
        "tag_random": parse_tag_random,
        "tag_sequence": parse_tag_sequence,
        "tag_self": parse_tag_self,
        "tag_target": parse_tag_target,
        "tag_dice": parse_tag_dice,
        "newline": parse_newline,
        "tag_newline": parse_tag_newline,
        "message_tags": parse_message_tags,
        "position": parse_position,
        "icon": parse_icon,
        "balloon": parse_balloon,
        "serif": parse_serif,
        "serif_inner": parse_serif_inner,
        "tag_serif": parse_tag_serif,
        "tag_random_wrap": parse_tag_random_wrap,
        "tag_sequence_wrap": parse_tag_sequence_wrap,
        "wrap_tags": parse_wrap_tags,
        "message": parse_message,
        "align_left": parse_align_left,
        "align_right": parse_align_right,
        "align_center": parse_align_center,
        "align_justify": parse_align_justify,
        "column_2": parse_column_2,
        "column_3": parse_column_3,
        "list": parse_list,
        "align_tags": parse_align_tags,
        "tag_column_2": parse_tag_column_2,
        "tag_column_3": parse_tag_column_3,
        "image": parse_image,
        "tag_image": parse_tag_image,
        "tag_message": parse_tag_message,
        "tag_list": parse_tag_list,
        "document_tags": parse_document_tags,
        "document": parse_document
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "document";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_bra() {
        var result0;
        
        if (/^[<\uFF1C]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[<\\uFF1C]");
          }
        }
        return result0;
      }
      
      function parse_ket() {
        var result0;
        
        if (/^[>\uFF1E]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[>\\uFF1E]");
          }
        }
        return result0;
      }
      
      function parse_separator() {
        var result0;
        
        if (/^[|\uFF5C]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[|\\uFF5C]");
          }
        }
        return result0;
      }
      
      function parse_plus() {
        var result0;
        
        if (/^[+\uFF0B]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[+\\uFF0B]");
          }
        }
        return result0;
      }
      
      function parse_n1_9() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[1-9\uFF11-\uFF19]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[1-9\\uFF11-\\uFF19]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, number) {
        return (function() {
          return this.format_number(number);
        }).apply(__initializer);
        })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_n0_9() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[0-9\uFF10-\uFF19]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9\\uFF10-\\uFF19]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, number) {
        return (function() {
          return this.format_number(number);
        }).apply(__initializer);
        })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_a_f() {
        var result0;
        
        if (/^[a-fA-F]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-fA-F]");
          }
        }
        return result0;
      }
      
      function parse_RGB() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 35) {
          result0 = "#";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#\"");
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          result1 = parse_n0_9();
          if (result1 === null) {
            result1 = parse_a_f();
          }
          if (result1 !== null) {
            result2 = parse_n0_9();
            if (result2 === null) {
              result2 = parse_a_f();
            }
            if (result2 !== null) {
              result3 = parse_n0_9();
              if (result3 === null) {
                result3 = parse_a_f();
              }
              if (result3 !== null) {
                result4 = parse_n0_9();
                if (result4 === null) {
                  result4 = parse_a_f();
                }
                if (result4 !== null) {
                  result5 = parse_n0_9();
                  if (result5 === null) {
                    result5 = parse_a_f();
                  }
                  if (result5 !== null) {
                    result6 = parse_n0_9();
                    if (result6 === null) {
                      result6 = parse_a_f();
                    }
                    if (result6 !== null) {
                      result1 = [result1, result2, result3, result4, result5, result6];
                    } else {
                      result1 = null;
                      pos = pos2;
                    }
                  } else {
                    result1 = null;
                    pos = pos2;
                  }
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, RGB) {
        return (function() {
          return "#" + (RGB.join(''));
        }).apply(__initializer);
        })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_non_negative_integer() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_n1_9();
        if (result0 !== null) {
          pos2 = pos;
          result2 = parse_n0_9();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_n0_9();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result1 = (function(offset, n2) {
          return (function() {
            return n2.join('');
          }).apply(__initializer);
          })(pos2, result1);
          }
          if (result1 === null) {
            pos = pos2;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n1) {
        return (function() {
          return n1.join('');
        }).apply(__initializer);
        })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_n0_9();
        }
        return result0;
      }
      
      function parse_any() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.length > pos) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("any character");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, any) {
        return (function() {
          return {
            html: any.replace(/</, '&lt;').replace(/>/, '&gt;'),
            count: [any]
          };
        }).apply(__initializer);
        })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_bold() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 22826) {
            result1 = "\u592A";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u592A\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
        return (function() {
          return 'b';
        }).apply(__initializer);
        })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_big() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 22823) {
            result1 = "\u5927";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u5927\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
        return (function() {
          return 'big';
        }).apply(__initializer);
        })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_small() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 23567) {
            result1 = "\u5C0F";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u5C0F\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
        return (function() {
          return 'small';
        }).apply(__initializer);
        })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_italic() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 26012) {
            result1 = "\u659C";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u659C\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
        return (function() {
          return 'i';
        }).apply(__initializer);
        })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_delete() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 28040) {
            result1 = "\u6D88";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u6D88\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
        return (function() {
          return 'del';
        }).apply(__initializer);
        })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_under() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 19979) {
            result1 = "\u4E0B";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u4E0B\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
        return (function() {
          return 'u';
        }).apply(__initializer);
        })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_thin() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 32048) {
            result1 = "\u7D30";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u7D30\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_middle() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 20013) {
            result1 = "\u4E2D";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u4E2D\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_normal() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 20803) {
            result1 = "\u5143";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u5143\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_default_color() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 35) {
            result1 = "#";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"#\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_color() {
        var result0;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 40658) {
          result0 = "\u9ED2";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u9ED2\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {
        return (function() {
          return "#000000";
        }).apply(__initializer);
        })(pos1);
        }
        if (result0 === null) {
          pos = pos1;
        }
        if (result0 === null) {
          pos1 = pos;
          if (input.charCodeAt(pos) === 30333) {
            result0 = "\u767D";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u767D\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset) {
          return (function() {
            return "#FFFFFF";
          }).apply(__initializer);
          })(pos1);
          }
          if (result0 === null) {
            pos = pos1;
          }
          if (result0 === null) {
            pos1 = pos;
            if (input.charCodeAt(pos) === 36196) {
              result0 = "\u8D64";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\u8D64\"");
              }
            }
            if (result0 !== null) {
              result0 = (function(offset) {
            return (function() {
              return "#FF0000";
            }).apply(__initializer);
            })(pos1);
            }
            if (result0 === null) {
              pos = pos1;
            }
            if (result0 === null) {
              pos1 = pos;
              if (input.charCodeAt(pos) === 27225) {
                result0 = "\u6A59";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\u6A59\"");
                }
              }
              if (result0 !== null) {
                result0 = (function(offset) {
              return (function() {
                return "#FFA500";
              }).apply(__initializer);
              })(pos1);
              }
              if (result0 === null) {
                pos = pos1;
              }
              if (result0 === null) {
                pos1 = pos;
                if (input.charCodeAt(pos) === 40644) {
                  result0 = "\u9EC4";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\u9EC4\"");
                  }
                }
                if (result0 !== null) {
                  result0 = (function(offset) {
                return (function() {
                  return "#FFFF00";
                }).apply(__initializer);
                })(pos1);
                }
                if (result0 === null) {
                  pos = pos1;
                }
                if (result0 === null) {
                  pos1 = pos;
                  if (input.charCodeAt(pos) === 32209) {
                    result0 = "\u7DD1";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"\\u7DD1\"");
                    }
                  }
                  if (result0 !== null) {
                    result0 = (function(offset) {
                  return (function() {
                    return "#00FF00";
                  }).apply(__initializer);
                  })(pos1);
                  }
                  if (result0 === null) {
                    pos = pos1;
                  }
                  if (result0 === null) {
                    pos1 = pos;
                    if (input.charCodeAt(pos) === 38738) {
                      result0 = "\u9752";
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"\\u9752\"");
                      }
                    }
                    if (result0 !== null) {
                      result0 = (function(offset) {
                    return (function() {
                      return "#0000FF";
                    }).apply(__initializer);
                    })(pos1);
                    }
                    if (result0 === null) {
                      pos = pos1;
                    }
                    if (result0 === null) {
                      pos1 = pos;
                      if (input.charCodeAt(pos) === 34253) {
                        result0 = "\u85CD";
                        pos++;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"\\u85CD\"");
                        }
                      }
                      if (result0 !== null) {
                        result0 = (function(offset) {
                      return (function() {
                        return "#000080";
                      }).apply(__initializer);
                      })(pos1);
                      }
                      if (result0 === null) {
                        pos = pos1;
                      }
                      if (result0 === null) {
                        pos1 = pos;
                        if (input.charCodeAt(pos) === 32043) {
                          result0 = "\u7D2B";
                          pos++;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\u7D2B\"");
                          }
                        }
                        if (result0 !== null) {
                          result0 = (function(offset) {
                        return (function() {
                          return "#800080";
                        }).apply(__initializer);
                        })(pos1);
                        }
                        if (result0 === null) {
                          pos = pos1;
                        }
                        if (result0 === null) {
                          result0 = parse_RGB();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, color) {
        return (function() {
          return {
            color: color
          };
        }).apply(__initializer);
        })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_ruby() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result2 = parse_document_tags();
          if (result2 === null) {
            result2 = parse_message_tags();
            if (result2 === null) {
              result2 = parse_tag_ruby();
              if (result2 === null) {
                result2 = parse_ket();
              }
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result3 = parse_string_tags();
            if (result3 === null) {
              result3 = parse_any();
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            pos3 = pos;
            reportFailures++;
            result2 = parse_document_tags();
            if (result2 === null) {
              result2 = parse_message_tags();
              if (result2 === null) {
                result2 = parse_tag_ruby();
                if (result2 === null) {
                  result2 = parse_ket();
                }
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos3;
            }
            if (result2 !== null) {
              result3 = parse_string_tags();
              if (result3 === null) {
                result3 = parse_any();
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 94) {
                result3 = "^";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"^\"");
                }
              }
              if (result3 === null) {
                if (input.charCodeAt(pos) === 65342) {
                  result3 = "\uFF3E";
                  pos++;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\uFF3E\"");
                  }
                }
              }
              if (result3 !== null) {
                result4 = parse_bra();
                if (result4 !== null) {
                  result5 = [];
                  pos2 = pos;
                  pos3 = pos;
                  reportFailures++;
                  result6 = parse_document_tags();
                  if (result6 === null) {
                    result6 = parse_message_tags();
                    if (result6 === null) {
                      result6 = parse_tag_ruby();
                      if (result6 === null) {
                        result6 = parse_ket();
                      }
                    }
                  }
                  reportFailures--;
                  if (result6 === null) {
                    result6 = "";
                  } else {
                    result6 = null;
                    pos = pos3;
                  }
                  if (result6 !== null) {
                    result7 = parse_string_tags();
                    if (result7 === null) {
                      result7 = parse_any();
                    }
                    if (result7 !== null) {
                      result6 = [result6, result7];
                    } else {
                      result6 = null;
                      pos = pos2;
                    }
                  } else {
                    result6 = null;
                    pos = pos2;
                  }
                  while (result6 !== null) {
                    result5.push(result6);
                    pos2 = pos;
                    pos3 = pos;
                    reportFailures++;
                    result6 = parse_document_tags();
                    if (result6 === null) {
                      result6 = parse_message_tags();
                      if (result6 === null) {
                        result6 = parse_tag_ruby();
                        if (result6 === null) {
                          result6 = parse_ket();
                        }
                      }
                    }
                    reportFailures--;
                    if (result6 === null) {
                      result6 = "";
                    } else {
                      result6 = null;
                      pos = pos3;
                    }
                    if (result6 !== null) {
                      result7 = parse_string_tags();
                      if (result7 === null) {
                        result7 = parse_any();
                      }
                      if (result7 !== null) {
                        result6 = [result6, result7];
                      } else {
                        result6 = null;
                        pos = pos2;
                      }
                    } else {
                      result6 = null;
                      pos = pos2;
                    }
                  }
                  if (result5 !== null) {
                    result6 = parse_ket();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, rb, rt) {
        return (function() {
          var $rb, $rt;
          $rb = this.return_html('rb', rb.map(function(h, i) {
            return h[1];
          }));
          $rt = this.return_html('rt', rt.map(function(h, i) {
            return h[1];
          }));
          return this.return_html('ruby', [$rb, $rt]);
        }).apply(__initializer);
        })(pos0, result0[1], result0[5]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_bold() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bold();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result2 = parse_document_tags();
          if (result2 === null) {
            result2 = parse_message_tags();
            if (result2 === null) {
              result2 = parse_thin();
              if (result2 === null) {
                result2 = parse_normal();
                if (result2 === null) {
                  result2 = parse_separator();
                  if (result2 === null) {
                    result2 = parse_plus();
                    if (result2 === null) {
                      result2 = parse_ket();
                    }
                  }
                }
              }
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            pos3 = pos;
            result3 = parse_bold();
            if (result3 !== null) {
              result3 = (function(offset) {
            return (function() {
              return this.empty;
            }).apply(__initializer);
            })(pos3);
            }
            if (result3 === null) {
              pos = pos3;
            }
            if (result3 === null) {
              result3 = parse_string_tags();
              if (result3 === null) {
                result3 = parse_any();
              }
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            pos3 = pos;
            reportFailures++;
            result2 = parse_document_tags();
            if (result2 === null) {
              result2 = parse_message_tags();
              if (result2 === null) {
                result2 = parse_thin();
                if (result2 === null) {
                  result2 = parse_normal();
                  if (result2 === null) {
                    result2 = parse_separator();
                    if (result2 === null) {
                      result2 = parse_plus();
                      if (result2 === null) {
                        result2 = parse_ket();
                      }
                    }
                  }
                }
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos3;
            }
            if (result2 !== null) {
              pos3 = pos;
              result3 = parse_bold();
              if (result3 !== null) {
                result3 = (function(offset) {
              return (function() {
                return this.empty;
              }).apply(__initializer);
              })(pos3);
              }
              if (result3 === null) {
                pos = pos3;
              }
              if (result3 === null) {
                result3 = parse_string_tags();
                if (result3 === null) {
                  result3 = parse_any();
                }
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, tag, inner) {
        return (function() {
          return this.return_html(tag, inner.map(function(h, i) {
            return h[1];
          }));
        }).apply(__initializer);
        })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_big() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_big();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result2 = parse_document_tags();
          if (result2 === null) {
            result2 = parse_message_tags();
            if (result2 === null) {
              result2 = parse_middle();
              if (result2 === null) {
                result2 = parse_normal();
                if (result2 === null) {
                  result2 = parse_separator();
                  if (result2 === null) {
                    result2 = parse_plus();
                    if (result2 === null) {
                      result2 = parse_ket();
                    }
                  }
                }
              }
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result3 = parse_string_tags();
            if (result3 === null) {
              result3 = parse_any();
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            pos3 = pos;
            reportFailures++;
            result2 = parse_document_tags();
            if (result2 === null) {
              result2 = parse_message_tags();
              if (result2 === null) {
                result2 = parse_middle();
                if (result2 === null) {
                  result2 = parse_normal();
                  if (result2 === null) {
                    result2 = parse_separator();
                    if (result2 === null) {
                      result2 = parse_plus();
                      if (result2 === null) {
                        result2 = parse_ket();
                      }
                    }
                  }
                }
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos3;
            }
            if (result2 !== null) {
              result3 = parse_string_tags();
              if (result3 === null) {
                result3 = parse_any();
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, tag, inner) {
        return (function() {
          return this.return_html(tag, inner.map(function(h, i) {
            return h[1];
          }));
        }).apply(__initializer);
        })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_small() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_small();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result2 = parse_document_tags();
          if (result2 === null) {
            result2 = parse_message_tags();
            if (result2 === null) {
              result2 = parse_middle();
              if (result2 === null) {
                result2 = parse_normal();
                if (result2 === null) {
                  result2 = parse_separator();
                  if (result2 === null) {
                    result2 = parse_plus();
                    if (result2 === null) {
                      result2 = parse_ket();
                    }
                  }
                }
              }
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result3 = parse_string_tags();
            if (result3 === null) {
              result3 = parse_any();
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            pos3 = pos;
            reportFailures++;
            result2 = parse_document_tags();
            if (result2 === null) {
              result2 = parse_message_tags();
              if (result2 === null) {
                result2 = parse_middle();
                if (result2 === null) {
                  result2 = parse_normal();
                  if (result2 === null) {
                    result2 = parse_separator();
                    if (result2 === null) {
                      result2 = parse_plus();
                      if (result2 === null) {
                        result2 = parse_ket();
                      }
                    }
                  }
                }
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos3;
            }
            if (result2 !== null) {
              result3 = parse_string_tags();
              if (result3 === null) {
                result3 = parse_any();
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, tag, inner) {
        return (function() {
          return this.return_html(tag, inner.map(function(h, i) {
            return h[1];
          }));
        }).apply(__initializer);
        })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_italic() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_italic();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result2 = parse_document_tags();
          if (result2 === null) {
            result2 = parse_message_tags();
            if (result2 === null) {
              result2 = parse_italic();
              if (result2 === null) {
                result2 = parse_normal();
                if (result2 === null) {
                  result2 = parse_separator();
                  if (result2 === null) {
                    result2 = parse_plus();
                    if (result2 === null) {
                      result2 = parse_ket();
                    }
                  }
                }
              }
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result3 = parse_string_tags();
            if (result3 === null) {
              result3 = parse_any();
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            pos3 = pos;
            reportFailures++;
            result2 = parse_document_tags();
            if (result2 === null) {
              result2 = parse_message_tags();
              if (result2 === null) {
                result2 = parse_italic();
                if (result2 === null) {
                  result2 = parse_normal();
                  if (result2 === null) {
                    result2 = parse_separator();
                    if (result2 === null) {
                      result2 = parse_plus();
                      if (result2 === null) {
                        result2 = parse_ket();
                      }
                    }
                  }
                }
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos3;
            }
            if (result2 !== null) {
              result3 = parse_string_tags();
              if (result3 === null) {
                result3 = parse_any();
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result2 = parse_italic();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, tag, inner) {
        return (function() {
          return this.return_html(tag, inner.map(function(h, i) {
            return h[1];
          }));
        }).apply(__initializer);
        })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_delete() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_delete();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result2 = parse_document_tags();
          if (result2 === null) {
            result2 = parse_message_tags();
            if (result2 === null) {
              result2 = parse_delete();
              if (result2 === null) {
                result2 = parse_normal();
                if (result2 === null) {
                  result2 = parse_separator();
                  if (result2 === null) {
                    result2 = parse_plus();
                    if (result2 === null) {
                      result2 = parse_ket();
                    }
                  }
                }
              }
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result3 = parse_string_tags();
            if (result3 === null) {
              result3 = parse_any();
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            pos3 = pos;
            reportFailures++;
            result2 = parse_document_tags();
            if (result2 === null) {
              result2 = parse_message_tags();
              if (result2 === null) {
                result2 = parse_delete();
                if (result2 === null) {
                  result2 = parse_normal();
                  if (result2 === null) {
                    result2 = parse_separator();
                    if (result2 === null) {
                      result2 = parse_plus();
                      if (result2 === null) {
                        result2 = parse_ket();
                      }
                    }
                  }
                }
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos3;
            }
            if (result2 !== null) {
              result3 = parse_string_tags();
              if (result3 === null) {
                result3 = parse_any();
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result2 = parse_delete();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, tag, inner) {
        return (function() {
          return this.return_html(tag, inner.map(function(h, i) {
            return h[1];
          }));
        }).apply(__initializer);
        })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_under() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_under();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result2 = parse_document_tags();
          if (result2 === null) {
            result2 = parse_message_tags();
            if (result2 === null) {
              result2 = parse_under();
              if (result2 === null) {
                result2 = parse_normal();
                if (result2 === null) {
                  result2 = parse_separator();
                  if (result2 === null) {
                    result2 = parse_plus();
                    if (result2 === null) {
                      result2 = parse_ket();
                    }
                  }
                }
              }
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result3 = parse_string_tags();
            if (result3 === null) {
              result3 = parse_any();
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            pos3 = pos;
            reportFailures++;
            result2 = parse_document_tags();
            if (result2 === null) {
              result2 = parse_message_tags();
              if (result2 === null) {
                result2 = parse_under();
                if (result2 === null) {
                  result2 = parse_normal();
                  if (result2 === null) {
                    result2 = parse_separator();
                    if (result2 === null) {
                      result2 = parse_plus();
                      if (result2 === null) {
                        result2 = parse_ket();
                      }
                    }
                  }
                }
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos3;
            }
            if (result2 !== null) {
              result3 = parse_string_tags();
              if (result3 === null) {
                result3 = parse_any();
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result2 = parse_under();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, tag, inner) {
        return (function() {
          return this.return_html(tag, inner.map(function(h, i) {
            return h[1];
          }));
        }).apply(__initializer);
        })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_color() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          result1 = parse_color();
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result3 = [];
              pos2 = pos;
              pos3 = pos;
              reportFailures++;
              result4 = parse_document_tags();
              if (result4 === null) {
                result4 = parse_message_tags();
                if (result4 === null) {
                  pos4 = pos;
                  result4 = parse_bra();
                  if (result4 !== null) {
                    result5 = parse_color();
                    if (result5 !== null) {
                      result6 = parse_ket();
                      if (result6 !== null) {
                        result4 = [result4, result5, result6];
                      } else {
                        result4 = null;
                        pos = pos4;
                      }
                    } else {
                      result4 = null;
                      pos = pos4;
                    }
                  } else {
                    result4 = null;
                    pos = pos4;
                  }
                  if (result4 === null) {
                    result4 = parse_default_color();
                    if (result4 === null) {
                      result4 = parse_normal();
                      if (result4 === null) {
                        result4 = parse_separator();
                        if (result4 === null) {
                          result4 = parse_plus();
                          if (result4 === null) {
                            result4 = parse_ket();
                          }
                        }
                      }
                    }
                  }
                }
              }
              reportFailures--;
              if (result4 === null) {
                result4 = "";
              } else {
                result4 = null;
                pos = pos3;
              }
              if (result4 !== null) {
                result5 = parse_string_tags();
                if (result5 === null) {
                  result5 = parse_any();
                }
                if (result5 !== null) {
                  result4 = [result4, result5];
                } else {
                  result4 = null;
                  pos = pos2;
                }
              } else {
                result4 = null;
                pos = pos2;
              }
              while (result4 !== null) {
                result3.push(result4);
                pos2 = pos;
                pos3 = pos;
                reportFailures++;
                result4 = parse_document_tags();
                if (result4 === null) {
                  result4 = parse_message_tags();
                  if (result4 === null) {
                    pos4 = pos;
                    result4 = parse_bra();
                    if (result4 !== null) {
                      result5 = parse_color();
                      if (result5 !== null) {
                        result6 = parse_ket();
                        if (result6 !== null) {
                          result4 = [result4, result5, result6];
                        } else {
                          result4 = null;
                          pos = pos4;
                        }
                      } else {
                        result4 = null;
                        pos = pos4;
                      }
                    } else {
                      result4 = null;
                      pos = pos4;
                    }
                    if (result4 === null) {
                      result4 = parse_default_color();
                      if (result4 === null) {
                        result4 = parse_normal();
                        if (result4 === null) {
                          result4 = parse_separator();
                          if (result4 === null) {
                            result4 = parse_plus();
                            if (result4 === null) {
                              result4 = parse_ket();
                            }
                          }
                        }
                      }
                    }
                  }
                }
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = pos3;
                }
                if (result4 !== null) {
                  result5 = parse_string_tags();
                  if (result5 === null) {
                    result5 = parse_any();
                  }
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = pos2;
                  }
                } else {
                  result4 = null;
                  pos = pos2;
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, color, inner) {
        return (function() {
          return this.return_html('color', inner.map(function(h, i) {
            return h[1];
          }), color);
        }).apply(__initializer);
        })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_thin() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_thin();
        if (result0 !== null) {
          result0 = (function(offset) {
        return (function() {
          return this.empty;
        }).apply(__initializer);
        })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_middle() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_middle();
        if (result0 !== null) {
          result0 = (function(offset) {
        return (function() {
          return this.empty;
        }).apply(__initializer);
        })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_normal() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_normal();
        if (result0 !== null) {
          result0 = (function(offset) {
        return (function() {
          return this.empty;
        }).apply(__initializer);
        })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_default_color() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_default_color();
        if (result0 !== null) {
          result0 = (function(offset) {
        return (function() {
          return this.empty;
        }).apply(__initializer);
        })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_string_tags() {
        var result0;
        
        result0 = parse_tag_ruby();
        if (result0 === null) {
          result0 = parse_tag_bold();
          if (result0 === null) {
            result0 = parse_tag_big();
            if (result0 === null) {
              result0 = parse_tag_small();
              if (result0 === null) {
                result0 = parse_tag_italic();
                if (result0 === null) {
                  result0 = parse_tag_delete();
                  if (result0 === null) {
                    result0 = parse_tag_under();
                    if (result0 === null) {
                      result0 = parse_tag_color();
                      if (result0 === null) {
                        result0 = parse_tag_thin();
                        if (result0 === null) {
                          result0 = parse_tag_middle();
                          if (result0 === null) {
                            result0 = parse_tag_default_color();
                            if (result0 === null) {
                              result0 = parse_tag_normal();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_string() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        result1 = parse_string_tags();
        if (result1 === null) {
          result1 = parse_any();
        }
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_string_tags();
          if (result1 === null) {
            result1 = parse_any();
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, inner) {
        return (function() {
          return this.return_html('string', inner);
        }).apply(__initializer);
        })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_random() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result2 = parse_document_tags();
          if (result2 === null) {
            result2 = parse_tag_random();
            if (result2 === null) {
              result2 = parse_tag_sequence();
              if (result2 === null) {
                result2 = parse_separator();
                if (result2 === null) {
                  result2 = parse_ket();
                }
              }
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result3 = parse_message_tags();
            if (result3 === null) {
              result3 = parse_string_tags();
              if (result3 === null) {
                result3 = parse_any();
              }
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            pos3 = pos;
            reportFailures++;
            result2 = parse_document_tags();
            if (result2 === null) {
              result2 = parse_tag_random();
              if (result2 === null) {
                result2 = parse_tag_sequence();
                if (result2 === null) {
                  result2 = parse_separator();
                  if (result2 === null) {
                    result2 = parse_ket();
                  }
                }
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos3;
            }
            if (result2 !== null) {
              result3 = parse_message_tags();
              if (result3 === null) {
                result3 = parse_string_tags();
                if (result3 === null) {
                  result3 = parse_any();
                }
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            pos2 = pos;
            result3 = parse_separator();
            if (result3 !== null) {
              result4 = [];
              pos3 = pos;
              pos4 = pos;
              reportFailures++;
              result5 = parse_document_tags();
              if (result5 === null) {
                result5 = parse_tag_random();
                if (result5 === null) {
                  result5 = parse_tag_sequence();
                  if (result5 === null) {
                    result5 = parse_separator();
                    if (result5 === null) {
                      result5 = parse_ket();
                    }
                  }
                }
              }
              reportFailures--;
              if (result5 === null) {
                result5 = "";
              } else {
                result5 = null;
                pos = pos4;
              }
              if (result5 !== null) {
                result6 = parse_message_tags();
                if (result6 === null) {
                  result6 = parse_string_tags();
                  if (result6 === null) {
                    result6 = parse_any();
                  }
                }
                if (result6 !== null) {
                  result5 = [result5, result6];
                } else {
                  result5 = null;
                  pos = pos3;
                }
              } else {
                result5 = null;
                pos = pos3;
              }
              while (result5 !== null) {
                result4.push(result5);
                pos3 = pos;
                pos4 = pos;
                reportFailures++;
                result5 = parse_document_tags();
                if (result5 === null) {
                  result5 = parse_tag_random();
                  if (result5 === null) {
                    result5 = parse_tag_sequence();
                    if (result5 === null) {
                      result5 = parse_separator();
                      if (result5 === null) {
                        result5 = parse_ket();
                      }
                    }
                  }
                }
                reportFailures--;
                if (result5 === null) {
                  result5 = "";
                } else {
                  result5 = null;
                  pos = pos4;
                }
                if (result5 !== null) {
                  result6 = parse_message_tags();
                  if (result6 === null) {
                    result6 = parse_string_tags();
                    if (result6 === null) {
                      result6 = parse_any();
                    }
                  }
                  if (result6 !== null) {
                    result5 = [result5, result6];
                  } else {
                    result5 = null;
                    pos = pos3;
                  }
                } else {
                  result5 = null;
                  pos = pos3;
                }
              }
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = pos2;
              }
            } else {
              result3 = null;
              pos = pos2;
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                pos2 = pos;
                result3 = parse_separator();
                if (result3 !== null) {
                  result4 = [];
                  pos3 = pos;
                  pos4 = pos;
                  reportFailures++;
                  result5 = parse_document_tags();
                  if (result5 === null) {
                    result5 = parse_tag_random();
                    if (result5 === null) {
                      result5 = parse_tag_sequence();
                      if (result5 === null) {
                        result5 = parse_separator();
                        if (result5 === null) {
                          result5 = parse_ket();
                        }
                      }
                    }
                  }
                  reportFailures--;
                  if (result5 === null) {
                    result5 = "";
                  } else {
                    result5 = null;
                    pos = pos4;
                  }
                  if (result5 !== null) {
                    result6 = parse_message_tags();
                    if (result6 === null) {
                      result6 = parse_string_tags();
                      if (result6 === null) {
                        result6 = parse_any();
                      }
                    }
                    if (result6 !== null) {
                      result5 = [result5, result6];
                    } else {
                      result5 = null;
                      pos = pos3;
                    }
                  } else {
                    result5 = null;
                    pos = pos3;
                  }
                  while (result5 !== null) {
                    result4.push(result5);
                    pos3 = pos;
                    pos4 = pos;
                    reportFailures++;
                    result5 = parse_document_tags();
                    if (result5 === null) {
                      result5 = parse_tag_random();
                      if (result5 === null) {
                        result5 = parse_tag_sequence();
                        if (result5 === null) {
                          result5 = parse_separator();
                          if (result5 === null) {
                            result5 = parse_ket();
                          }
                        }
                      }
                    }
                    reportFailures--;
                    if (result5 === null) {
                      result5 = "";
                    } else {
                      result5 = null;
                      pos = pos4;
                    }
                    if (result5 !== null) {
                      result6 = parse_message_tags();
                      if (result6 === null) {
                        result6 = parse_string_tags();
                        if (result6 === null) {
                          result6 = parse_any();
                        }
                      }
                      if (result6 !== null) {
                        result5 = [result5, result6];
                      } else {
                        result5 = null;
                        pos = pos3;
                      }
                    } else {
                      result5 = null;
                      pos = pos3;
                    }
                  }
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result3 = parse_ket();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, left, right) {
        return (function() {
          var $left, $rights,
            _this = this;
          $left = this.return_html('element', left.map(function(h, i) {
            return h[1];
          }));
          $rights = right.map(function(h1, i) {
            return _this.return_html('element', h1[1].map(function(h2, j) {
              return h2[1];
            }));
          });
          $rights.unshift($left);
          return this.return_html('random', $rights);
        }).apply(__initializer);
        })(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_sequence() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result2 = parse_document_tags();
          if (result2 === null) {
            result2 = parse_tag_random();
            if (result2 === null) {
              result2 = parse_tag_sequence();
              if (result2 === null) {
                result2 = parse_plus();
                if (result2 === null) {
                  result2 = parse_ket();
                }
              }
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result3 = parse_message_tags();
            if (result3 === null) {
              result3 = parse_string_tags();
              if (result3 === null) {
                result3 = parse_any();
              }
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            pos3 = pos;
            reportFailures++;
            result2 = parse_document_tags();
            if (result2 === null) {
              result2 = parse_tag_random();
              if (result2 === null) {
                result2 = parse_tag_sequence();
                if (result2 === null) {
                  result2 = parse_plus();
                  if (result2 === null) {
                    result2 = parse_ket();
                  }
                }
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos3;
            }
            if (result2 !== null) {
              result3 = parse_message_tags();
              if (result3 === null) {
                result3 = parse_string_tags();
                if (result3 === null) {
                  result3 = parse_any();
                }
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            pos2 = pos;
            result3 = parse_plus();
            if (result3 !== null) {
              result4 = [];
              pos3 = pos;
              pos4 = pos;
              reportFailures++;
              result5 = parse_document_tags();
              if (result5 === null) {
                result5 = parse_tag_random();
                if (result5 === null) {
                  result5 = parse_tag_sequence();
                  if (result5 === null) {
                    result5 = parse_plus();
                    if (result5 === null) {
                      result5 = parse_ket();
                    }
                  }
                }
              }
              reportFailures--;
              if (result5 === null) {
                result5 = "";
              } else {
                result5 = null;
                pos = pos4;
              }
              if (result5 !== null) {
                result6 = parse_message_tags();
                if (result6 === null) {
                  result6 = parse_string_tags();
                  if (result6 === null) {
                    result6 = parse_any();
                  }
                }
                if (result6 !== null) {
                  result5 = [result5, result6];
                } else {
                  result5 = null;
                  pos = pos3;
                }
              } else {
                result5 = null;
                pos = pos3;
              }
              while (result5 !== null) {
                result4.push(result5);
                pos3 = pos;
                pos4 = pos;
                reportFailures++;
                result5 = parse_document_tags();
                if (result5 === null) {
                  result5 = parse_tag_random();
                  if (result5 === null) {
                    result5 = parse_tag_sequence();
                    if (result5 === null) {
                      result5 = parse_plus();
                      if (result5 === null) {
                        result5 = parse_ket();
                      }
                    }
                  }
                }
                reportFailures--;
                if (result5 === null) {
                  result5 = "";
                } else {
                  result5 = null;
                  pos = pos4;
                }
                if (result5 !== null) {
                  result6 = parse_message_tags();
                  if (result6 === null) {
                    result6 = parse_string_tags();
                    if (result6 === null) {
                      result6 = parse_any();
                    }
                  }
                  if (result6 !== null) {
                    result5 = [result5, result6];
                  } else {
                    result5 = null;
                    pos = pos3;
                  }
                } else {
                  result5 = null;
                  pos = pos3;
                }
              }
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = pos2;
              }
            } else {
              result3 = null;
              pos = pos2;
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                pos2 = pos;
                result3 = parse_plus();
                if (result3 !== null) {
                  result4 = [];
                  pos3 = pos;
                  pos4 = pos;
                  reportFailures++;
                  result5 = parse_document_tags();
                  if (result5 === null) {
                    result5 = parse_tag_random();
                    if (result5 === null) {
                      result5 = parse_tag_sequence();
                      if (result5 === null) {
                        result5 = parse_plus();
                        if (result5 === null) {
                          result5 = parse_ket();
                        }
                      }
                    }
                  }
                  reportFailures--;
                  if (result5 === null) {
                    result5 = "";
                  } else {
                    result5 = null;
                    pos = pos4;
                  }
                  if (result5 !== null) {
                    result6 = parse_message_tags();
                    if (result6 === null) {
                      result6 = parse_string_tags();
                      if (result6 === null) {
                        result6 = parse_any();
                      }
                    }
                    if (result6 !== null) {
                      result5 = [result5, result6];
                    } else {
                      result5 = null;
                      pos = pos3;
                    }
                  } else {
                    result5 = null;
                    pos = pos3;
                  }
                  while (result5 !== null) {
                    result4.push(result5);
                    pos3 = pos;
                    pos4 = pos;
                    reportFailures++;
                    result5 = parse_document_tags();
                    if (result5 === null) {
                      result5 = parse_tag_random();
                      if (result5 === null) {
                        result5 = parse_tag_sequence();
                        if (result5 === null) {
                          result5 = parse_plus();
                          if (result5 === null) {
                            result5 = parse_ket();
                          }
                        }
                      }
                    }
                    reportFailures--;
                    if (result5 === null) {
                      result5 = "";
                    } else {
                      result5 = null;
                      pos = pos4;
                    }
                    if (result5 !== null) {
                      result6 = parse_message_tags();
                      if (result6 === null) {
                        result6 = parse_string_tags();
                        if (result6 === null) {
                          result6 = parse_any();
                        }
                      }
                      if (result6 !== null) {
                        result5 = [result5, result6];
                      } else {
                        result5 = null;
                        pos = pos3;
                      }
                    } else {
                      result5 = null;
                      pos = pos3;
                    }
                  }
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result3 = parse_ket();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, left, right) {
        return (function() {
          var $left, $rights,
            _this = this;
          $left = this.return_html('element', left.map(function(h, i) {
            return h[1];
          }));
          $rights = right.map(function(h1, i) {
            return _this.return_html('element', h1[1].map(function(h2, j) {
              return h2[1];
            }));
          });
          $rights.unshift($left);
          return this.return_html('sequence', $rights);
        }).apply(__initializer);
        })(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_self() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 33258) {
            result1 = "\u81EA";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u81EA\"");
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 20998) {
              result2 = "\u5206";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\u5206\"");
              }
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_ket();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
        return (function() {
          return this.return_html('self', [this.empty]);
        }).apply(__initializer);
        })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_target() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 23550) {
            result1 = "\u5BFE";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u5BFE\"");
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 35937) {
              result2 = "\u8C61";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\u8C61\"");
              }
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_ket();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
        return (function() {
          return this.return_html('target', [this.empty]);
        }).apply(__initializer);
        })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_dice() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          result1 = parse_non_negative_integer();
          if (result1 !== null) {
            if (/^[dD\uFF44\uFF24]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[dD\\uFF44\\uFF24]");
              }
            }
            if (result2 !== null) {
              result3 = parse_non_negative_integer();
              if (result3 !== null) {
                result4 = parse_ket();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, count, number) {
        return (function() {
          return this.return_html('dice', [this.empty], {
            count: count,
            number: number
          });
        }).apply(__initializer);
        })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_newline() {
        var result0, result1, result2;
        var pos0;
        
        if (input.substr(pos, 2) === "\r\n") {
          result0 = "\r\n";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\r\\n\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 2) === "\n\r") {
            result0 = "\n\r";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\n\\r\"");
            }
          }
          if (result0 === null) {
            if (/^[\n\r]/.test(input.charAt(pos))) {
              result0 = input.charAt(pos);
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("[\\n\\r]");
              }
            }
            if (result0 === null) {
              pos0 = pos;
              result0 = parse_bra();
              if (result0 !== null) {
                if (input.substr(pos, 2) === "\u6539\u884C") {
                  result1 = "\u6539\u884C";
                  pos += 2;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\u6539\\u884C\"");
                  }
                }
                if (result1 !== null) {
                  result2 = parse_ket();
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            }
          }
        }
        return result0;
      }
      
      function parse_tag_newline() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_newline();
        if (result0 !== null) {
          result0 = (function(offset) {
        return (function() {
          return this.return_html('br', [this.empty]);
        }).apply(__initializer);
        })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_message_tags() {
        var result0;
        
        result0 = parse_tag_random();
        if (result0 === null) {
          result0 = parse_tag_sequence();
          if (result0 === null) {
            result0 = parse_tag_self();
            if (result0 === null) {
              result0 = parse_tag_target();
              if (result0 === null) {
                result0 = parse_tag_dice();
                if (result0 === null) {
                  result0 = parse_tag_newline();
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_position() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 24038) {
          result0 = "\u5DE6";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u5DE6\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {
        return (function() {
          return 'left';
        }).apply(__initializer);
        })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          if (input.charCodeAt(pos) === 21491) {
            result0 = "\u53F3";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u53F3\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset) {
          return (function() {
            return 'right';
          }).apply(__initializer);
          })(pos0);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = "";
            if (result0 !== null) {
              pos2 = pos;
              reportFailures++;
              result1 = parse_ket();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = pos2;
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset) {
            return (function() {
              return this.default_serif.position;
            }).apply(__initializer);
            })(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
          }
        }
        return result0;
      }
      
      function parse_icon() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 28961) {
          result0 = "\u7121";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u7121\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {
        return (function() {
          return false;
        }).apply(__initializer);
        })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_non_negative_integer();
          if (result0 === null) {
            pos0 = pos;
            result0 = "";
            if (result0 !== null) {
              result0 = (function(offset) {
            return (function() {
              return this.default_serif.icon;
            }).apply(__initializer);
            })(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
          }
        }
        return result0;
      }
      
      function parse_balloon() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 36890) {
          result0 = "\u901A";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u901A\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {
        return (function() {
          return 'none';
        }).apply(__initializer);
        })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          if (input.charCodeAt(pos) === 32771) {
            result0 = "\u8003";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u8003\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset) {
          return (function() {
            return 'think';
          }).apply(__initializer);
          })(pos0);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            if (input.charCodeAt(pos) === 21561) {
              result0 = "\u5439";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\u5439\"");
              }
            }
            if (result0 !== null) {
              result0 = (function(offset) {
            return (function() {
              return 'normal';
            }).apply(__initializer);
            })(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              result0 = "";
              if (result0 !== null) {
                result0 = (function(offset) {
              return (function() {
                return this.default_serif.balloon;
              }).apply(__initializer);
              })(pos0);
              }
              if (result0 === null) {
                pos = pos0;
              }
            }
          }
        }
        return result0;
      }
      
      function parse_serif() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          result1 = parse_position();
          if (result1 !== null) {
            result2 = parse_icon();
            if (result2 !== null) {
              result3 = parse_balloon();
              if (result3 !== null) {
                result4 = parse_ket();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, position, icon, balloon) {
        return (function() {
          return {
            position: position,
            icon: icon,
            balloon: balloon
          };
        }).apply(__initializer);
        })(pos0, result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_serif_inner() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        reportFailures++;
        result0 = parse_document_tags();
        if (result0 === null) {
          result0 = parse_separator();
          if (result0 === null) {
            result0 = parse_plus();
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result1 = parse_message_tags();
          if (result1 === null) {
            result1 = parse_string_tags();
            if (result1 === null) {
              result1 = parse_any();
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_serif() {
        var result0, result1, result2;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_serif();
        if (result0 === null) {
          pos2 = pos;
          pos3 = pos;
          result0 = "";
          if (result0 !== null) {
            pos4 = pos;
            reportFailures++;
            result1 = parse_serif_inner();
            reportFailures--;
            if (result1 !== null) {
              result1 = "";
              pos = pos4;
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos3;
            }
          } else {
            result0 = null;
            pos = pos3;
          }
          if (result0 !== null) {
            result0 = (function(offset) {
          return (function() {
            return this.default_serif;
          }).apply(__initializer);
          })(pos2);
          }
          if (result0 === null) {
            pos = pos2;
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_serif_inner();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_serif_inner();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, serif, inner) {
        return (function() {
          return this.return_html('serif', inner.map(function(h, i) {
            return h[1];
          }), serif);
        }).apply(__initializer);
        })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_random_wrap() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_newline();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_separator();
          if (result1 !== null) {
            result2 = parse_newline();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              pos2 = pos;
              result3 = parse_newline();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result5 = parse_tag_serif();
                if (result5 !== null) {
                  result4 = [];
                  while (result5 !== null) {
                    result4.push(result5);
                    result5 = parse_tag_serif();
                  }
                } else {
                  result4 = null;
                }
                if (result4 !== null) {
                  result5 = parse_newline();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result6 = parse_separator();
                    if (result6 !== null) {
                      result3 = [result3, result4, result5, result6];
                    } else {
                      result3 = null;
                      pos = pos2;
                    }
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              } else {
                result3 = null;
                pos = pos2;
              }
              if (result3 !== null) {
                pos2 = pos;
                result5 = parse_newline();
                result5 = result5 !== null ? result5 : "";
                if (result5 !== null) {
                  result7 = parse_tag_serif();
                  if (result7 !== null) {
                    result6 = [];
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_tag_serif();
                    }
                  } else {
                    result6 = null;
                  }
                  if (result6 !== null) {
                    result7 = parse_newline();
                    result7 = result7 !== null ? result7 : "";
                    if (result7 !== null) {
                      result8 = parse_separator();
                      if (result8 !== null) {
                        result5 = [result5, result6, result7, result8];
                      } else {
                        result5 = null;
                        pos = pos2;
                      }
                    } else {
                      result5 = null;
                      pos = pos2;
                    }
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                } else {
                  result5 = null;
                  pos = pos2;
                }
                if (result5 !== null) {
                  result4 = [];
                  while (result5 !== null) {
                    result4.push(result5);
                    pos2 = pos;
                    result5 = parse_newline();
                    result5 = result5 !== null ? result5 : "";
                    if (result5 !== null) {
                      result7 = parse_tag_serif();
                      if (result7 !== null) {
                        result6 = [];
                        while (result7 !== null) {
                          result6.push(result7);
                          result7 = parse_tag_serif();
                        }
                      } else {
                        result6 = null;
                      }
                      if (result6 !== null) {
                        result7 = parse_newline();
                        result7 = result7 !== null ? result7 : "";
                        if (result7 !== null) {
                          result8 = parse_separator();
                          if (result8 !== null) {
                            result5 = [result5, result6, result7, result8];
                          } else {
                            result5 = null;
                            pos = pos2;
                          }
                        } else {
                          result5 = null;
                          pos = pos2;
                        }
                      } else {
                        result5 = null;
                        pos = pos2;
                      }
                    } else {
                      result5 = null;
                      pos = pos2;
                    }
                  }
                } else {
                  result4 = null;
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, left, inner) {
        return (function() {
          var $inners, $left,
            _this = this;
          $left = this.return_html('element', left[1]);
          $inners = inner.map(function(h, i) {
            return _this.return_html('element', h[1]);
          });
          $inners.unshift($left);
          return this.return_html('random', $inners);
        }).apply(__initializer);
        })(pos0, result0[3], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_sequence_wrap() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_newline();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_plus();
          if (result1 !== null) {
            result2 = parse_newline();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              pos2 = pos;
              result3 = parse_newline();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result5 = parse_tag_serif();
                if (result5 !== null) {
                  result4 = [];
                  while (result5 !== null) {
                    result4.push(result5);
                    result5 = parse_tag_serif();
                  }
                } else {
                  result4 = null;
                }
                if (result4 !== null) {
                  result5 = parse_newline();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result6 = parse_plus();
                    if (result6 !== null) {
                      result3 = [result3, result4, result5, result6];
                    } else {
                      result3 = null;
                      pos = pos2;
                    }
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              } else {
                result3 = null;
                pos = pos2;
              }
              if (result3 !== null) {
                pos2 = pos;
                result5 = parse_newline();
                result5 = result5 !== null ? result5 : "";
                if (result5 !== null) {
                  result7 = parse_tag_serif();
                  if (result7 !== null) {
                    result6 = [];
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_tag_serif();
                    }
                  } else {
                    result6 = null;
                  }
                  if (result6 !== null) {
                    result7 = parse_newline();
                    result7 = result7 !== null ? result7 : "";
                    if (result7 !== null) {
                      result8 = parse_plus();
                      if (result8 !== null) {
                        result5 = [result5, result6, result7, result8];
                      } else {
                        result5 = null;
                        pos = pos2;
                      }
                    } else {
                      result5 = null;
                      pos = pos2;
                    }
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                } else {
                  result5 = null;
                  pos = pos2;
                }
                if (result5 !== null) {
                  result4 = [];
                  while (result5 !== null) {
                    result4.push(result5);
                    pos2 = pos;
                    result5 = parse_newline();
                    result5 = result5 !== null ? result5 : "";
                    if (result5 !== null) {
                      result7 = parse_tag_serif();
                      if (result7 !== null) {
                        result6 = [];
                        while (result7 !== null) {
                          result6.push(result7);
                          result7 = parse_tag_serif();
                        }
                      } else {
                        result6 = null;
                      }
                      if (result6 !== null) {
                        result7 = parse_newline();
                        result7 = result7 !== null ? result7 : "";
                        if (result7 !== null) {
                          result8 = parse_plus();
                          if (result8 !== null) {
                            result5 = [result5, result6, result7, result8];
                          } else {
                            result5 = null;
                            pos = pos2;
                          }
                        } else {
                          result5 = null;
                          pos = pos2;
                        }
                      } else {
                        result5 = null;
                        pos = pos2;
                      }
                    } else {
                      result5 = null;
                      pos = pos2;
                    }
                  }
                } else {
                  result4 = null;
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, left, inner) {
        return (function() {
          var $inners, $left,
            _this = this;
          $left = this.return_html('element', left[1]);
          $inners = inner.map(function(h, i) {
            return _this.return_html('element', h[1]);
          });
          $inners.unshift($left);
          return this.return_html('sequence', $inners);
        }).apply(__initializer);
        })(pos0, result0[3], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_wrap_tags() {
        var result0;
        
        result0 = parse_tag_random_wrap();
        if (result0 === null) {
          result0 = parse_tag_sequence_wrap();
        }
        return result0;
      }
      
      function parse_message() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        result1 = parse_wrap_tags();
        if (result1 === null) {
          result1 = parse_tag_serif();
          if (result1 === null) {
            result1 = parse_any();
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_wrap_tags();
          if (result1 === null) {
            result1 = parse_tag_serif();
            if (result1 === null) {
              result1 = parse_any();
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, inner) {
        return (function() {
          return this.return_html('message', inner);
        }).apply(__initializer);
        })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_align_left() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 2) === "\u5DE6\u5BC4") {
          result0 = "\u5DE6\u5BC4";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u5DE6\\u5BC4\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {
        return (function() {
          return 'align_left';
        }).apply(__initializer);
        })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_align_right() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 2) === "\u53F3\u5BC4") {
          result0 = "\u53F3\u5BC4";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u53F3\\u5BC4\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {
        return (function() {
          return 'align_right';
        }).apply(__initializer);
        })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_align_center() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 2) === "\u4E2D\u5BC4") {
          result0 = "\u4E2D\u5BC4";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u4E2D\\u5BC4\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {
        return (function() {
          return 'align_center';
        }).apply(__initializer);
        })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_align_justify() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 2) === "\u5747\u7B49") {
          result0 = "\u5747\u7B49";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u5747\\u7B49\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {
        return (function() {
          return 'align_justify';
        }).apply(__initializer);
        })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_column_2() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (/^[2\uFF12]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[2\\uFF12]");
            }
          }
          if (result1 !== null) {
            if (input.substr(pos, 2) === "\u6BB5\u7D44") {
              result2 = "\u6BB5\u7D44";
              pos += 2;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\u6BB5\\u7D44\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_ket();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
        return (function() {
          return 'column_2';
        }).apply(__initializer);
        })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_column_3() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (/^[3\uFF13]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[3\\uFF13]");
            }
          }
          if (result1 !== null) {
            if (input.substr(pos, 2) === "\u6BB5\u7D44") {
              result2 = "\u6BB5\u7D44";
              pos += 2;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\u6BB5\\u7D44\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_ket();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
        return (function() {
          return 'column_3';
        }).apply(__initializer);
        })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_list() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 20006) {
            result1 = "\u4E26";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u4E26\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_ket();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
        return (function() {
          return 'list';
        }).apply(__initializer);
        })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_align_tags() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          result1 = parse_align_left();
          if (result1 === null) {
            result1 = parse_align_right();
            if (result1 === null) {
              result1 = parse_align_center();
              if (result1 === null) {
                result1 = parse_align_justify();
              }
            }
          }
          if (result1 !== null) {
            result2 = parse_color();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_ket();
              if (result3 !== null) {
                result4 = parse_newline();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  pos2 = pos;
                  pos3 = pos;
                  reportFailures++;
                  result6 = parse_document_tags();
                  reportFailures--;
                  if (result6 === null) {
                    result6 = "";
                  } else {
                    result6 = null;
                    pos = pos3;
                  }
                  if (result6 !== null) {
                    result7 = parse_message_tags();
                    if (result7 === null) {
                      result7 = parse_string_tags();
                      if (result7 === null) {
                        result7 = parse_any();
                      }
                    }
                    if (result7 !== null) {
                      result6 = [result6, result7];
                    } else {
                      result6 = null;
                      pos = pos2;
                    }
                  } else {
                    result6 = null;
                    pos = pos2;
                  }
                  if (result6 !== null) {
                    result5 = [];
                    while (result6 !== null) {
                      result5.push(result6);
                      pos2 = pos;
                      pos3 = pos;
                      reportFailures++;
                      result6 = parse_document_tags();
                      reportFailures--;
                      if (result6 === null) {
                        result6 = "";
                      } else {
                        result6 = null;
                        pos = pos3;
                      }
                      if (result6 !== null) {
                        result7 = parse_message_tags();
                        if (result7 === null) {
                          result7 = parse_string_tags();
                          if (result7 === null) {
                            result7 = parse_any();
                          }
                        }
                        if (result7 !== null) {
                          result6 = [result6, result7];
                        } else {
                          result6 = null;
                          pos = pos2;
                        }
                      } else {
                        result6 = null;
                        pos = pos2;
                      }
                    }
                  } else {
                    result5 = null;
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, tag, color, inner) {
        return (function() {
          return this.return_html(tag, inner.map(function(h, i) {
            return h[1];
          }), color);
        }).apply(__initializer);
        })(pos0, result0[1], result0[2], result0[5]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_column_2() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_column_2();
        if (result0 !== null) {
          result1 = parse_newline();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            pos2 = pos;
            result2 = parse_align_tags();
            if (result2 !== null) {
              result3 = parse_align_tags();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, tag, inner) {
        return (function() {
          return this.return_html(tag, inner);
        }).apply(__initializer);
        })(pos0, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_column_3() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_column_3();
        if (result0 !== null) {
          result1 = parse_newline();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            pos2 = pos;
            result2 = parse_align_tags();
            if (result2 !== null) {
              result3 = parse_align_tags();
              if (result3 !== null) {
                result4 = parse_align_tags();
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, tag, inner) {
        return (function() {
          return this.return_html(tag, inner);
        }).apply(__initializer);
        })(pos0, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_image() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bra();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 32117) {
            result1 = "\u7D75";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u7D75\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_non_negative_integer();
            if (result2 !== null) {
              result3 = parse_ket();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, number) {
        return (function() {
          return {
            number: number
          };
        }).apply(__initializer);
        })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_image() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_image();
        if (result0 !== null) {
          result0 = (function(offset, image) {
        return (function() {
          return this.return_html('image', [], image);
        }).apply(__initializer);
        })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_message() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        result1 = parse_serif();
        reportFailures--;
        if (result1 !== null) {
          result1 = "";
          pos = pos2;
        } else {
          result1 = null;
        }
        if (result1 !== null) {
          result2 = parse_tag_serif();
          if (result2 !== null) {
            result1 = [result1, result2];
          } else {
            result1 = null;
            pos = pos1;
          }
        } else {
          result1 = null;
          pos = pos1;
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            pos1 = pos;
            pos2 = pos;
            reportFailures++;
            result1 = parse_serif();
            reportFailures--;
            if (result1 !== null) {
              result1 = "";
              pos = pos2;
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result2 = parse_tag_serif();
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, inner) {
        return (function() {
          return this.return_html('message', inner.map(function(h, i) {
            return h[1];
          }));
        }).apply(__initializer);
        })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_list() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_list();
        if (result0 !== null) {
          result1 = parse_newline();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            pos2 = pos;
            pos3 = pos;
            reportFailures++;
            result3 = parse_document_tags();
            reportFailures--;
            if (result3 === null) {
              result3 = "";
            } else {
              result3 = null;
              pos = pos3;
            }
            if (result3 !== null) {
              result4 = parse_message_tags();
              if (result4 === null) {
                result4 = parse_string_tags();
                if (result4 === null) {
                  result4 = parse_any();
                }
              }
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = pos2;
              }
            } else {
              result3 = null;
              pos = pos2;
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                pos2 = pos;
                pos3 = pos;
                reportFailures++;
                result3 = parse_document_tags();
                reportFailures--;
                if (result3 === null) {
                  result3 = "";
                } else {
                  result3 = null;
                  pos = pos3;
                }
                if (result3 !== null) {
                  result4 = parse_message_tags();
                  if (result4 === null) {
                    result4 = parse_string_tags();
                    if (result4 === null) {
                      result4 = parse_any();
                    }
                  }
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, tag, inner) {
        return (function() {
          return this.return_html(tag, inner.map(function(h, i) {
            return h[1];
          }));
        }).apply(__initializer);
        })(pos0, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_document_tags() {
        var result0;
        
        result0 = parse_align_tags();
        if (result0 === null) {
          result0 = parse_tag_column_2();
          if (result0 === null) {
            result0 = parse_tag_column_3();
            if (result0 === null) {
              result0 = parse_tag_image();
              if (result0 === null) {
                result0 = parse_wrap_tags();
                if (result0 === null) {
                  result0 = parse_tag_message();
                  if (result0 === null) {
                    result0 = parse_tag_list();
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_document() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        result1 = parse_document_tags();
        if (result1 === null) {
          result1 = parse_message_tags();
          if (result1 === null) {
            result1 = parse_string_tags();
            if (result1 === null) {
              result1 = parse_any();
            }
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_document_tags();
          if (result1 === null) {
            result1 = parse_message_tags();
            if (result1 === null) {
              result1 = parse_string_tags();
              if (result1 === null) {
                result1 = parse_any();
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, inner) {
        return (function() {
          return this.return_html('document', inner);
        }).apply(__initializer);
        })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      var __initializer;
      
      __initializer = (function() {
        this.format_number = function(number) {
          var index;
          index = "０１２３４５６７８９".indexOf(number);
          if (index === -1) {
            return number;
          } else {
            return index;
          }
        };
        this.return_html = function(tag, inners, data) {
          var $html, count, inner, _i, _len;
          if (inners == null) {
            inners = [];
          }
          if (data == null) {
            data = {};
          }
          $html = {
            tag: tag,
            inner: [],
            data: data
          };
          count = [];
          for (_i = 0, _len = inners.length; _i < _len; _i++) {
            inner = inners[_i];
            if (typeof $html.inner[$html.inner.length - 1] === 'string' && typeof inner.html === 'string') {
              $html.inner[$html.inner.length - 1] += inner.html;
            } else {
              $html.inner.push(inner.html);
            }
            count = count.concat(inner.count);
          }
          return {
            html: $html,
            count: count
          };
        };
        this.default_serif = {
          position: 'left',
          icon: 1,
          balloon: 'normal'
        };
        this.empty = {
          html: '',
          count: []
        };
        return this;
      }).call({});
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
