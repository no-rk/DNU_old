{
  @format_number = (number) ->
    index = "０１２３４５６７８９".indexOf(number)
    if index==-1 then number else index
  @return_html = (tag, inners = [], data = {}) ->
    $html = {
      tag: tag
      inner: []
      data: data
    }
    count = []
    for inner in inners
      if typeof($html.inner[$html.inner.length-1])=='string' and typeof(inner.html)=='string'
        $html.inner[$html.inner.length-1] += inner.html
      else
        $html.inner.push(inner.html)
      count = count.concat(inner.count)
    {
      html: $html
      count: count
    }
  @default_serif = {
    position: 'left'
    icon: 1
    balloon: 'normal'
  }
  @empty = { html: '', count: [] }
}

root = document

// names
bra       = [<＜]
ket       = [>＞]
separator = [|｜]
plus      = [+＋]

// number
n1_9 = number:[1-9１-９] {
  @format_number(number)
}
n0_9 = number:[0-9０-９] {
  @format_number(number)
}

// a to f
a_f = [a-fA-F]

// RGB
RGB = '#' RGB:((n0_9 / a_f) (n0_9 / a_f) (n0_9 / a_f) (n0_9 / a_f) (n0_9 / a_f) (n0_9 / a_f)) {
  "##{RGB.join('')}"
}

non_negative_integer = n1:(n1_9 (n2:n0_9+ { n2.join('') })) { n1.join('') } / n0_9

// any
any = any:. {
  { html: any.replace(/</, '&lt;').replace(/>/, '&gt;'), count: [any] }
}

// string_tag_names
bold    = bra '太' ket { 'b' }
big     = bra '大' ket { 'big' }
small   = bra '小' ket { 'small' }
italic  = bra '斜' ket { 'i' }
delete  = bra '消' ket { 'del' }
under   = bra '下' ket { 'u' }
thin    = bra '細' ket
middle  = bra '中' ket
normal  = bra '元' ket
default_color = bra '#' ket
color   = color:('黒' {"#000000"} / '白' {"#FFFFFF"} / '赤' {"#FF0000"} / '橙' {"#FFA500"} / '黄' {"#FFFF00"} / '緑' {"#00FF00"} / '青' {"#0000FF"} / '藍' {"#000080"} / '紫' {"#800080"} / RGB) {
  {
    color: color
  }
}

// string_tags
tag_ruby = bra rb:(!(document_tags / message_tags / tag_ruby / ket) (string_tags / any))* ket ('^' / '＾') bra rt:(!(document_tags / message_tags / tag_ruby / ket) (string_tags / any))* ket {
  $rb = @return_html 'rb', rb.map (h,i) ->
    h[1]
  $rt = @return_html 'rt', rt.map (h,i) ->
    h[1]
  @return_html 'ruby', [$rb, $rt]
}
tag_bold   = tag:bold   inner:(!(document_tags / message_tags / thin   /                 normal / separator / plus / ket) (bold { @empty } / string_tags / any))*         {
  @return_html tag, inner.map (h,i) ->
    h[1]
}
tag_big    = tag:big    inner:(!(document_tags / message_tags / middle /                 normal / separator / plus / ket) (                  string_tags / any))*         {
  @return_html tag, inner.map (h,i) ->
    h[1]
}
tag_small  = tag:small  inner:(!(document_tags / message_tags / middle /                 normal / separator / plus / ket) (                  string_tags / any))*         {
  @return_html tag, inner.map (h,i) ->
    h[1]
}
tag_italic = tag:italic inner:(!(document_tags / message_tags / italic /                 normal / separator / plus / ket) (                  string_tags / any))* italic? {
  @return_html tag, inner.map (h,i) ->
    h[1]
}
tag_delete = tag:delete inner:(!(document_tags / message_tags / delete /                 normal / separator / plus / ket) (                  string_tags / any))* delete? {
  @return_html tag, inner.map (h,i) ->
    h[1]
}
tag_under  = tag:under  inner:(!(document_tags / message_tags / under  /                 normal / separator / plus / ket) (                  string_tags / any))*  under? {
  @return_html tag, inner.map (h,i) ->
    h[1]
}
tag_color = bra color:color ket inner:(!(document_tags / message_tags / (bra color ket)  / default_color / normal / separator / plus / ket) (                  string_tags / any))*         {
  @return_html 'color', inner.map((h,i) ->
    h[1]
  ), color
}
tag_thin = thin {
  @empty
}
tag_middle = middle {
  @empty
}
tag_normal = normal {
  @empty
}
tag_default_color = default_color {
  @empty
}
string_tags = tag_ruby / tag_bold / tag_big / tag_small / tag_italic / tag_delete / tag_under / tag_color / tag_thin / tag_middle / tag_default_color / tag_normal

// string
string = inner:(string_tags / any)* {
  @return_html 'string', inner
}

// message_tags
tag_random   = bra left:(!(document_tags / separator / ket) (message_tags / string_tags / any))* right:(separator (!(document_tags / separator / ket) (message_tags / string_tags / any))*)+ ket {
  $left = @return_html 'element', left.map (h,i) ->
    h[1]
  $rights = right.map (h1,i) =>
    @return_html 'element', h1[1].map (h2,j) ->
      h2[1]
  $rights.unshift($left)
  @return_html 'random', $rights
}
tag_sequence = bra left:(!(document_tags /      plus / ket) (message_tags / string_tags / any))* right:(     plus (!(document_tags /      plus / ket) (message_tags / string_tags / any))*)+ ket {
  $left = @return_html 'element', left.map (h,i) ->
    h[1]
  $rights = right.map (h1,i) =>
    @return_html 'element', h1[1].map (h2,j) ->
      h2[1]
  $rights.unshift($left)
  @return_html 'sequence', $rights
}
tag_dice = bra count:non_negative_integer [dDｄＤ] number:non_negative_integer ket {
  @return_html 'dice', [@empty], { 
    count: count
    number: number
  }
}
newline = "\r\n" / "\n\r" / [\n\r] / (bra '改行' ket)
tag_newline = newline {
  @return_html 'br', [@empty]
}
message_tags = tag_random / tag_sequence / tag_dice / tag_newline

// tag_serif
position = '左' { 'left' } / '右'{ 'right' } / ('' !ket) { @default_serif.position }
icon = '無' { false } / non_negative_integer/ '' { @default_serif.icon }
balloon = '通' { 'none' } / '考' { 'think' } / '吹' { 'normal' } / '' { @default_serif.balloon }
serif = bra position:position icon:icon  balloon:balloon ket {
  {
    position: position
    icon: icon
    balloon: balloon
  }
}
serif_inner = !(document_tags / separator / plus) (message_tags / string_tags / any)
tag_serif = serif:(serif / ('' &serif_inner) { @default_serif }) inner:serif_inner* {
  @return_html 'serif', inner.map((h,i) ->
    h[1]
  ), serif
}

// wrap_tags
tag_random_wrap = newline? separator newline? inner:(newline? tag_serif+ newline? separator)+ {
  $inners = inner.map (h,i) =>
    @return_html 'element', h[1]
  @return_html 'random', $inners
}
tag_sequence_wrap = newline? plus newline? inner:(newline? tag_serif+ newline? plus)+ {
  $inners = inner.map (h,i) =>
    @return_html 'element', h[1]
  @return_html 'sequence', $inners
}
wrap_tags = tag_random_wrap / tag_sequence_wrap

// message
message = inner:(wrap_tags / tag_serif / any)* {
  @return_html 'message', inner
}

// document_tag_names
align_left    = '左寄' { 'align_left' }
align_right   = '右寄' { 'align_right' }
align_center  = '中寄' { 'align_center' }
align_justify = '均等' { 'align_justify' }
column_2 = bra [2２] '段組' ket { 'column_2' }
column_3 = bra [3３] '段組' ket { 'column_3' }
list = bra '並' ket { 'list' }

// document_tags
align_tags = bra tag:(align_left / align_right / align_center / align_justify) color:color? ket newline? inner:(!document_tags (message_tags / string_tags / any))+ {
  @return_html tag, inner.map((h,i) ->
    h[1]
  ), color
}
tag_column_2 = tag:column_2 newline? inner:(align_tags align_tags) {
  @return_html tag, inner
}
tag_column_3 = tag:column_3 newline? inner:(align_tags align_tags align_tags) {
  @return_html tag, inner
}
image = bra '絵' number:non_negative_integer ket {
  {
    number: number
  }
}
tag_image = image:image {
  @return_html 'image', [], image
}
tag_message = inner:(&serif tag_serif)+ {
  @return_html 'message', inner.map (h,i) ->
    h[1]
}
tag_list = tag:list newline? inner:(!document_tags (message_tags / string_tags / any))+ {
  @return_html tag, inner.map (h,i) ->
    h[1]
}

document_tags = align_tags / tag_column_2 / tag_column_3 / tag_image/ wrap_tags / tag_message/ tag_list

// document
document = inner:(document_tags / message_tags / string_tags / any)* {
  @return_html 'document', inner
}
